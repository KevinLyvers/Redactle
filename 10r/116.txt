https://en.wikipedia.org/wiki/Functional_programming
in, computer, science, functional, programming, is, a, programming, paradigm, where, programs, are, constructed, by, applying, and, composing, functions, it, is, a, declarative, programming, paradigm, in, which, function, definitions, are, trees, of, expressions, that, map, values, to, other, values, rather, than, a, sequence, of, imperative, statements, which, update, the, running, state, of, the, program, in, functional, programming, functions, are, treated, as, first, class, citizens, meaning, that, they, can, be, bound, to, names, including, local, identifiers, passed, as, arguments, and, returned, from, other, functions, just, as, any, other, data, type, can, this, allows, programs, to, be, written, in, a, declarative, and, composable, style, where, small, functions, are, combined, in, a, modular, manner, functional, programming, is, sometimes, treated, as, synonymous, with, purely, functional, programming, a, subset, of, functional, programming, which, treats, all, functions, as, deterministic, mathematical, functions, or, pure, functions, when, a, pure, function, is, called, with, some, given, arguments, it, will, always, return, the, same, result, and, cannot, be, affected, by, any, mutable, state, or, other, side, effects, this, is, in, contrast, with, impure, procedures, common, in, imperative, programming, which, can, have, side, effects, such, as, modifying, the, program, s, state, or, taking, input, from, a, user, proponents, of, purely, functional, programming, claim, that, by, restricting, side, effects, programs, can, have, fewer, bugs, be, easier, to, debug, and, test, and, be, more, suited, to, formal, verification, functional, programming, has, its, roots, in, academia, evolving, from, the, lambda, calculus, a, formal, system, of, computation, based, only, on, functions, functional, programming, has, historically, been, less, popular, than, imperative, programming, but, many, functional, languages, are, seeing, use, today, in, industry, and, education, including, common, lisp, scheme, clojure, wolfram, language, racket, erlang, elixir, ocaml, haskell, and, f, lean, is, a, functional, programming, language, commonly, used, for, verifying, mathematical, theorems, functional, programming, is, also, key, to, some, languages, that, have, found, success, in, specific, domains, like, javascript, in, the, web, r, in, statistics, j, k, and, q, in, financial, analysis, and, xquery, xslt, for, xml, domain, specific, declarative, languages, like, sql, and, lex, yacc, use, some, elements, of, functional, programming, such, as, not, allowing, mutable, values, in, addition, many, other, programming, languages, support, programming, in, a, functional, style, or, have, implemented, features, from, functional, programming, such, as, c, 11, c, kotlin, perl, php, python, go, rust, raku, scala, and, java, since, java, 8, the, lambda, calculus, developed, in, the, 1930s, by, alonzo, church, is, a, formal, system, of, computation, built, from, function, application, in, 1937, alan, turing, proved, that, the, lambda, calculus, and, turing, machines, are, equivalent, models, of, computation, showing, that, the, lambda, calculus, is, turing, complete, lambda, calculus, forms, the, basis, of, all, functional, programming, languages, an, equivalent, theoretical, formulation, combinatory, logic, was, developed, by, moses, sch, nfinkel, and, haskell, curry, in, the, 1920s, and, 1930s, church, later, developed, a, weaker, system, the, simply, typed, lambda, calculus, which, extended, the, lambda, calculus, by, assigning, a, data, type, to, all, terms, this, forms, the, basis, for, statically, typed, functional, programming, the, first, high, level, functional, programming, language, lisp, was, developed, in, the, late, 1950s, for, the, ibm, 700, 7000, series, of, scientific, computers, by, john, mccarthy, while, at, massachusetts, institute, of, technology, mit, lisp, functions, were, defined, using, church, s, lambda, notation, extended, with, a, label, construct, to, allow, recursive, functions, lisp, first, introduced, many, paradigmatic, features, of, functional, programming, though, early, lisps, were, multi, paradigm, languages, and, incorporated, support, for, numerous, programming, styles, as, new, paradigms, evolved, later, dialects, such, as, scheme, and, clojure, and, offshoots, such, as, dylan, and, julia, sought, to, simplify, and, rationalise, lisp, around, a, cleanly, functional, core, while, common, lisp, was, designed, to, preserve, and, update, the, paradigmatic, features, of, the, numerous, older, dialects, it, replaced, information, processing, language, ipl, 1956, is, sometimes, cited, as, the, first, computer, based, functional, programming, language, it, is, an, assembly, style, language, for, manipulating, lists, of, symbols, it, does, have, a, notion, of, generator, which, amounts, to, a, function, that, accepts, a, function, as, an, argument, and, since, it, is, an, assembly, level, language, code, can, be, data, so, ipl, can, be, regarded, as, having, higher, order, functions, however, it, relies, heavily, on, the, mutating, list, structure, and, similar, imperative, features, kenneth, e, iverson, developed, apl, in, the, early, 1960s, described, in, his, 1962, book, a, programming, language, isbn, 9780471430148, apl, was, the, primary, influence, on, john, backus, s, fp, in, the, early, 1990s, iverson, and, roger, hui, created, j, in, the, mid, 1990s, arthur, whitney, who, had, previously, worked, with, iverson, created, k, which, is, used, commercially, in, financial, industries, along, with, its, descendant, q, in, the, mid, 1960s, peter, landin, invented, secd, machine, the, first, abstract, machine, for, a, functional, programming, language, described, a, correspondence, between, algol, 60, and, the, lambda, calculus, and, proposed, the, iswim, programming, language, john, backus, presented, fp, in, his, 1977, turing, award, lecture, can, programming, be, liberated, from, the, von, neumann, style, a, functional, style, and, its, algebra, of, programs, he, defines, functional, programs, as, being, built, up, in, a, hierarchical, way, by, means, of, combining, forms, that, allow, an, algebra, of, programs, in, modern, language, this, means, that, functional, programs, follow, the, principle, of, compositionality, backus, s, paper, popularized, research, into, functional, programming, though, it, emphasized, function, level, programming, rather, than, the, lambda, calculus, style, now, associated, with, functional, programming, the, 1973, language, ml, was, created, by, robin, milner, at, the, university, of, edinburgh, and, david, turner, developed, the, language, sasl, at, the, university, of, st, andrews, also, in, edinburgh, in, the, 1970s, burstall, and, darlington, developed, the, functional, language, npl, npl, was, based, on, kleene, recursion, equations, and, was, first, introduced, in, their, work, on, program, transformation, burstall, macqueen, and, sannella, then, incorporated, the, polymorphic, type, checking, from, ml, to, produce, the, language, hope, ml, eventually, developed, into, several, dialects, the, most, common, of, which, are, now, ocaml, and, standard, ml, in, the, 1970s, guy, l, steele, and, gerald, jay, sussman, developed, scheme, as, described, in, the, lambda, papers, and, the, 1985, textbook, structure, and, interpretation, of, computer, programs, scheme, was, the, first, dialect, of, lisp, to, use, lexical, scoping, and, to, require, tail, call, optimization, features, that, encourage, functional, programming, in, the, 1980s, per, martin, l, f, developed, intuitionistic, type, theory, also, called, constructive, type, theory, which, associated, functional, programs, with, constructive, proofs, expressed, as, dependent, types, this, led, to, new, approaches, to, interactive, theorem, proving, and, has, influenced, the, development, of, subsequent, functional, programming, languages, the, lazy, functional, language, miranda, developed, by, david, turner, initially, appeared, in, 1985, and, had, a, strong, influence, on, haskell, with, miranda, being, proprietary, haskell, began, with, a, consensus, in, 1987, to, form, an, open, standard, for, functional, programming, research, implementation, releases, have, been, ongoing, as, of, 1990, more, recently, it, has, found, use, in, niches, such, as, parametric, cad, in, the, openscad, language, built, on, the, cgal, framework, although, its, restriction, on, reassigning, values, all, values, are, treated, as, constants, has, led, to, confusion, among, users, who, are, unfamiliar, with, functional, programming, as, a, concept, functional, programming, continues, to, be, used, in, commercial, settings, a, number, of, concepts, and, paradigms, are, specific, to, functional, programming, and, generally, foreign, to, imperative, programming, including, object, oriented, programming, however, programming, languages, often, cater, to, several, programming, paradigms, so, programmers, using, mostly, imperative, languages, may, have, utilized, some, of, these, concepts, higher, order, functions, are, functions, that, can, either, take, other, functions, as, arguments, or, return, them, as, results, in, calculus, an, example, of, a, higher, order, function, is, the, differential, operator, d, d, x, displaystyle, d, dx, which, returns, the, derivative, of, a, function, f, displaystyle, f, higher, order, functions, are, closely, related, to, first, class, functions, in, that, higher, order, functions, and, first, class, functions, both, allow, functions, as, arguments, and, results, of, other, functions, the, distinction, between, the, two, is, subtle, higher, order, describes, a, mathematical, concept, of, functions, that, operate, on, other, functions, while, first, class, is, a, computer, science, term, for, programming, language, entities, that, have, no, restriction, on, their, use, thus, first, class, functions, can, appear, anywhere, in, the, program, that, other, first, class, entities, like, numbers, can, including, as, arguments, to, other, functions, and, as, their, return, values, higher, order, functions, enable, partial, application, or, currying, a, technique, that, applies, a, function, to, its, arguments, one, at, a, time, with, each, application, returning, a, new, function, that, accepts, the, next, argument, this, lets, a, programmer, succinctly, express, for, example, the, successor, function, as, the, addition, operator, partially, applied, to, the, natural, number, one, pure, functions, or, expressions, have, no, side, effects, memory, or, i, o, this, means, that, pure, functions, have, several, useful, properties, many, of, which, can, be, used, to, optimize, the, code, while, most, compilers, for, imperative, programming, languages, detect, pure, functions, and, perform, common, subexpression, elimination, for, pure, function, calls, they, cannot, always, do, this, for, pre, compiled, libraries, which, generally, do, not, expose, this, information, thus, preventing, optimizations, that, involve, those, external, functions, some, compilers, such, as, gcc, add, extra, keywords, for, a, programmer, to, explicitly, mark, external, functions, as, pure, to, enable, such, optimizations, fortran, 95, also, lets, functions, be, designated, pure, c, 11, added, constexpr, keyword, with, similar, semantics, iteration, looping, in, functional, languages, is, usually, accomplished, via, recursion, recursive, functions, invoke, themselves, letting, an, operation, be, repeated, until, it, reaches, the, base, case, in, general, recursion, requires, maintaining, a, stack, which, consumes, space, in, a, linear, amount, to, the, depth, of, recursion, this, could, make, recursion, prohibitively, expensive, to, use, instead, of, imperative, loops, however, a, special, form, of, recursion, known, as, tail, recursion, can, be, recognized, and, optimized, by, a, compiler, into, the, same, code, used, to, implement, iteration, in, imperative, languages, tail, recursion, optimization, can, be, implemented, by, transforming, the, program, into, continuation, passing, style, during, compiling, among, other, approaches, the, scheme, language, standard, requires, implementations, to, support, proper, tail, recursion, meaning, they, must, allow, an, unbounded, number, of, active, tail, calls, proper, tail, recursion, is, not, simply, an, optimization, it, is, a, language, feature, that, assures, users, that, they, can, use, recursion, to, express, a, loop, and, doing, so, would, be, safe, for, space, moreover, contrary, to, its, name, it, accounts, for, all, tail, calls, not, just, tail, recursion, while, proper, tail, recursion, is, usually, implemented, by, turning, code, into, imperative, loops, implementations, might, implement, it, in, other, ways, for, example, chicken, intentionally, maintains, a, stack, and, lets, the, stack, overflow, however, when, this, happens, its, garbage, collector, will, claim, space, back, allowing, an, unbounded, number, of, active, tail, calls, even, though, it, does, not, turn, tail, recursion, into, a, loop, common, patterns, of, recursion, can, be, abstracted, away, using, higher, order, functions, with, catamorphisms, and, anamorphisms, or, folds, and, unfolds, being, the, most, obvious, examples, such, recursion, schemes, play, a, role, analogous, to, built, in, control, structures, such, as, loops, in, imperative, languages, most, general, purpose, functional, programming, languages, allow, unrestricted, recursion, and, are, turing, complete, which, makes, the, halting, problem, undecidable, can, cause, unsoundness, of, equational, reasoning, and, generally, requires, the, introduction, of, inconsistency, into, the, logic, expressed, by, the, language, s, type, system, some, special, purpose, languages, such, as, coq, allow, only, well, founded, recursion, and, are, strongly, normalizing, nonterminating, computations, can, be, expressed, only, with, infinite, streams, of, values, called, codata, as, a, consequence, these, languages, fail, to, be, turing, complete, and, expressing, certain, functions, in, them, is, impossible, but, they, can, still, express, a, wide, class, of, interesting, computations, while, avoiding, the, problems, introduced, by, unrestricted, recursion, functional, programming, limited, to, well, founded, recursion, with, a, few, other, constraints, is, called, total, functional, programming, functional, languages, can, be, categorized, by, whether, they, use, strict, eager, or, non, strict, lazy, evaluation, concepts, that, refer, to, how, function, arguments, are, processed, when, an, expression, is, being, evaluated, the, technical, difference, is, in, the, denotational, semantics, of, expressions, containing, failing, or, divergent, computations, under, strict, evaluation, the, evaluation, of, any, term, containing, a, failing, subterm, fails, for, example, the, expression, fails, under, strict, evaluation, because, of, the, division, by, zero, in, the, third, element, of, the, list, under, lazy, evaluation, the, length, function, returns, the, value, 4, i, e, the, number, of, items, in, the, list, since, evaluating, it, does, not, attempt, to, evaluate, the, terms, making, up, the, list, in, brief, strict, evaluation, always, fully, evaluates, function, arguments, before, invoking, the, function, lazy, evaluation, does, not, evaluate, function, arguments, unless, their, values, are, required, to, evaluate, the, function, call, itself, the, usual, implementation, strategy, for, lazy, evaluation, in, functional, languages, is, graph, reduction, lazy, evaluation, is, used, by, default, in, several, pure, functional, languages, including, miranda, clean, and, haskell, hughes, 1984, argues, for, lazy, evaluation, as, a, mechanism, for, improving, program, modularity, through, separation, of, concerns, by, easing, independent, implementation, of, producers, and, consumers, of, data, streams, launchbury, 1993, describes, some, difficulties, that, lazy, evaluation, introduces, particularly, in, analyzing, a, program, s, storage, requirements, and, proposes, an, operational, semantics, to, aid, in, such, analysis, harper, 2009, proposes, including, both, strict, and, lazy, evaluation, in, the, same, language, using, the, language, s, type, system, to, distinguish, them, especially, since, the, development, of, hindley, milner, type, inference, in, the, 1970s, functional, programming, languages, have, tended, to, use, typed, lambda, calculus, rejecting, all, invalid, programs, at, compilation, time, and, risking, false, positive, errors, as, opposed, to, the, untyped, lambda, calculus, that, accepts, all, valid, programs, at, compilation, time, and, risks, false, negative, errors, used, in, lisp, and, its, variants, such, as, scheme, as, they, reject, all, invalid, programs, at, runtime, when, the, information, is, enough, to, not, reject, valid, programs, the, use, of, algebraic, datatypes, makes, manipulation, of, complex, data, structures, convenient, the, presence, of, strong, compile, time, type, checking, makes, programs, more, reliable, in, absence, of, other, reliability, techniques, like, test, driven, development, while, type, inference, frees, the, programmer, from, the, need, to, manually, declare, types, to, the, compiler, in, most, cases, some, research, oriented, functional, languages, such, as, coq, agda, cayenne, and, epigram, are, based, on, intuitionistic, type, theory, which, lets, types, depend, on, terms, such, types, are, called, dependent, types, these, type, systems, do, not, have, decidable, type, inference, and, are, difficult, to, understand, and, program, with, but, dependent, types, can, express, arbitrary, propositions, in, higher, order, logic, through, the, curry, howard, isomorphism, then, well, typed, programs, in, these, languages, become, a, means, of, writing, formal, mathematical, proofs, from, which, a, compiler, can, generate, certified, code, while, these, languages, are, mainly, of, interest, in, academic, research, including, in, formalized, mathematics, they, have, begun, to, be, used, in, engineering, as, well, compcert, is, a, compiler, for, a, subset, of, the, c, programming, language, that, is, written, in, coq, and, formally, verified, a, limited, form, of, dependent, types, called, generalized, algebraic, data, types, gadt, s, can, be, implemented, in, a, way, that, provides, some, of, the, benefits, of, dependently, typed, programming, while, avoiding, most, of, its, inconvenience, gadt, s, are, available, in, the, glasgow, haskell, compiler, in, ocaml, and, in, scala, and, have, been, proposed, as, additions, to, other, languages, including, java, and, c, functional, programs, do, not, have, assignment, statements, that, is, the, value, of, a, variable, in, a, functional, program, never, changes, once, defined, this, eliminates, any, chances, of, side, effects, because, any, variable, can, be, replaced, with, its, actual, value, at, any, point, of, execution, so, functional, programs, are, referentially, transparent, consider, c, assignment, statement, x, x, 10, this, changes, the, value, assigned, to, the, variable, x, let, us, say, that, the, initial, value, of, x, was, 1, then, two, consecutive, evaluations, of, the, variable, x, yields, 10, and, 100, respectively, clearly, replacing, x, x, 10, with, either, 10, or, 100, gives, a, program, a, different, meaning, and, so, the, expression, is, not, referentially, transparent, in, fact, assignment, statements, are, never, referentially, transparent, now, consider, another, function, such, as, int, plusone, int, x, return, x, 1, is, transparent, as, it, does, not, implicitly, change, the, input, x, and, thus, has, no, such, side, effects, functional, programs, exclusively, use, this, type, of, function, and, are, therefore, referentially, transparent, purely, functional, data, structures, are, often, represented, in, a, different, way, to, their, imperative, counterparts, for, example, the, array, with, constant, access, and, update, times, is, a, basic, component, of, most, imperative, languages, and, many, imperative, data, structures, such, as, the, hash, table, and, binary, heap, are, based, on, arrays, arrays, can, be, replaced, by, maps, or, random, access, lists, which, admit, purely, functional, implementation, but, have, logarithmic, access, and, update, times, purely, functional, data, structures, have, persistence, a, property, of, keeping, previous, versions, of, the, data, structure, unmodified, in, clojure, persistent, data, structures, are, used, as, functional, alternatives, to, their, imperative, counterparts, persistent, vectors, for, example, use, trees, for, partial, updating, calling, the, insert, method, will, result, in, some, but, not, all, nodes, being, created, functional, programming, is, very, different, from, imperative, programming, the, most, significant, differences, stem, from, the, fact, that, functional, programming, avoids, side, effects, which, are, used, in, imperative, programming, to, implement, state, and, i, o, pure, functional, programming, completely, prevents, side, effects, and, provides, referential, transparency, higher, order, functions, are, rarely, used, in, older, imperative, programming, a, traditional, imperative, program, might, use, a, loop, to, traverse, and, modify, a, list, a, functional, program, on, the, other, hand, would, probably, use, a, higher, order, map, function, that, takes, a, function, and, a, list, generating, and, returning, a, new, list, by, applying, the, function, to, each, list, item, the, following, two, examples, written, in, javascript, achieve, the, same, effect, they, multiply, all, even, numbers, in, an, array, by, 10, and, add, them, all, storing, the, final, sum, in, the, variable, result, traditional, imperative, loop, functional, programming, with, higher, order, functions, sometimes, the, abstractions, offered, by, functional, programming, might, lead, to, development, of, more, robust, code, that, avoids, certain, issues, that, might, arise, when, building, upon, large, amount, of, complex, imperative, code, such, as, off, by, one, errors, see, greenspun, s, tenth, rule, there, are, tasks, for, example, maintaining, a, bank, account, balance, that, often, seem, most, naturally, implemented, with, state, pure, functional, programming, performs, these, tasks, and, i, o, tasks, such, as, accepting, user, input, and, printing, to, the, screen, in, a, different, way, the, pure, functional, programming, language, haskell, implements, them, using, monads, derived, from, category, theory, monads, offer, a, way, to, abstract, certain, types, of, computational, patterns, including, but, not, limited, to, modeling, of, computations, with, mutable, state, and, other, side, effects, such, as, i, o, in, an, imperative, manner, without, losing, purity, while, existing, monads, may, be, easy, to, apply, in, a, program, given, appropriate, templates, and, examples, many, students, find, them, difficult, to, understand, conceptually, e, g, when, asked, to, define, new, monads, which, is, sometimes, needed, for, certain, types, of, libraries, functional, languages, also, simulate, states, by, passing, around, immutable, states, this, can, be, done, by, making, a, function, accept, the, state, as, one, of, its, parameters, and, return, a, new, state, together, with, the, result, leaving, the, old, state, unchanged, impure, functional, languages, usually, include, a, more, direct, method, of, managing, mutable, state, clojure, for, example, uses, managed, references, that, can, be, updated, by, applying, pure, functions, to, the, current, state, this, kind, of, approach, enables, mutability, while, still, promoting, the, use, of, pure, functions, as, the, preferred, way, to, express, computations, alternative, methods, such, as, hoare, logic, and, uniqueness, have, been, developed, to, track, side, effects, in, programs, some, modern, research, languages, use, effect, systems, to, make, the, presence, of, side, effects, explicit, functional, programming, languages, are, typically, less, efficient, in, their, use, of, cpu, and, memory, than, imperative, languages, such, as, c, and, pascal, this, is, related, to, the, fact, that, some, mutable, data, structures, like, arrays, have, a, very, straightforward, implementation, using, present, hardware, flat, arrays, may, be, accessed, very, efficiently, with, deeply, pipelined, cpus, prefetched, efficiently, through, caches, with, no, complex, pointer, chasing, or, handled, with, simd, instructions, it, is, also, not, easy, to, create, their, equally, efficient, general, purpose, immutable, counterparts, for, purely, functional, languages, the, worst, case, slowdown, is, logarithmic, in, the, number, of, memory, cells, used, because, mutable, memory, can, be, represented, by, a, purely, functional, data, structure, with, logarithmic, access, time, such, as, a, balanced, tree, however, such, slowdowns, are, not, universal, for, programs, that, perform, intensive, numerical, computations, functional, languages, such, as, ocaml, and, clean, are, only, slightly, slower, than, c, according, to, the, computer, language, benchmarks, game, for, programs, that, handle, large, matrices, and, multidimensional, databases, array, functional, languages, such, as, j, and, k, were, designed, with, speed, optimizations, immutability, of, data, can, in, many, cases, lead, to, execution, efficiency, by, allowing, the, compiler, to, make, assumptions, that, are, unsafe, in, an, imperative, language, thus, increasing, opportunities, for, inline, expansion, even, if, the, involved, copying, that, may, seem, implicit, when, dealing, with, persistent, immutable, data, structures, might, seem, computationally, costly, some, functional, programming, languages, like, clojure, solve, this, issue, by, implementing, mechanisms, for, safe, memory, sharing, between, formally, immutable, data, rust, distinguishes, itself, by, its, approach, to, data, immutability, which, involves, immutable, references, and, a, concept, called, lifetimes, immutable, data, with, separation, of, identity, and, state, and, shared, nothing, schemes, can, also, potentially, be, more, well, suited, for, concurrent, and, parallel, programming, by, the, virtue, of, reducing, or, eliminating, the, risk, of, certain, concurrency, hazards, since, concurrent, operations, are, usually, atomic, and, this, allows, eliminating, the, need, for, locks, this, is, how, for, example, java, util, concurrent, classes, are, implemented, where, some, of, them, are, immutable, variants, of, the, corresponding, classes, that, are, not, suitable, for, concurrent, use, functional, programming, languages, often, have, a, concurrency, model, that, instead, of, shared, state, and, synchronization, leverages, message, passing, mechanisms, such, as, the, actor, model, where, each, actor, is, a, container, for, state, behavior, child, actors, and, a, message, queue, this, approach, is, common, in, erlang, elixir, or, akka, lazy, evaluation, may, also, speed, up, the, program, even, asymptotically, whereas, it, may, slow, it, down, at, most, by, a, constant, factor, however, it, may, introduce, memory, leaks, if, used, improperly, launchbury, 1993, discusses, theoretical, issues, related, to, memory, leaks, from, lazy, evaluation, and, o, sullivan, et, al, 2008, give, some, practical, advice, for, analyzing, and, fixing, them, however, the, most, general, implementations, of, lazy, evaluation, making, extensive, use, of, dereferenced, code, and, data, perform, poorly, on, modern, processors, with, deep, pipelines, and, multi, level, caches, where, a, cache, miss, may, cost, hundreds, of, cycles, some, functional, programming, languages, might, not, optimize, abstractions, such, as, higher, order, functions, like, map, or, filter, as, efficiently, as, the, underlying, imperative, operations, consider, as, an, example, the, following, two, ways, to, check, if, 5, is, an, even, number, in, clojure, when, benchmarked, using, the, criterium, tool, on, a, ryzen, 7900x, gnu, linux, pc, in, a, leiningen, repl, 2, 11, 2, running, on, java, vm, version, 22, and, clojure, version, 1, 11, 1, the, first, implementation, which, is, implemented, as, has, the, mean, execution, time, of, 4, 76, ms, while, the, second, one, in, which, equals, is, a, direct, invocation, of, the, underlying, java, method, has, a, mean, execution, time, of, 2, 8, s, roughly, 1700, times, faster, part, of, that, can, be, attributed, to, the, type, checking, and, exception, handling, involved, in, the, implementation, of, even, so, let, s, take, for, instance, the, lo, library, for, go, which, implements, various, higher, order, functions, common, in, functional, programming, languages, using, generics, in, a, benchmark, provided, by, the, library, s, author, calling, map, is, 4, slower, than, an, equivalent, for, loop, and, has, the, same, allocation, profile, which, can, be, attributed, to, various, compiler, optimizations, such, as, inlining, one, distinguishing, feature, of, rust, are, zero, cost, abstractions, this, means, that, using, them, imposes, no, additional, runtime, overhead, this, is, achieved, thanks, to, the, compiler, using, loop, unrolling, where, each, iteration, of, a, loop, be, it, imperative, or, using, iterators, is, converted, into, a, standalone, assembly, instruction, without, the, overhead, of, the, loop, controlling, code, if, an, iterative, operation, writes, to, an, array, the, resulting, array, s, elements, will, be, stored, in, specific, cpu, registers, allowing, for, constant, time, access, at, runtime, it, is, possible, to, use, a, functional, style, of, programming, in, languages, that, are, not, traditionally, considered, functional, languages, for, example, both, d, and, fortran, 95, explicitly, support, pure, functions, javascript, lua, python, and, go, had, first, class, functions, from, their, inception, python, had, support, for, lambda, map, reduce, and, filter, in, 1994, as, well, as, closures, in, python, 2, 2, though, python, 3, relegated, reduce, to, the, functools, standard, library, module, first, class, functions, have, been, introduced, into, other, mainstream, languages, such, as, php, 5, 3, visual, basic, 9, c, 3, 0, c, 11, and, kotlin, in, php, anonymous, classes, closures, and, lambdas, are, fully, supported, libraries, and, language, extensions, for, immutable, data, structures, are, being, developed, to, aid, programming, in, the, functional, style, in, java, anonymous, classes, can, sometimes, be, used, to, simulate, closures, however, anonymous, classes, are, not, always, proper, replacements, to, closures, because, they, have, more, limited, capabilities, java, 8, supports, lambda, expressions, as, a, replacement, for, some, anonymous, classes, in, c, anonymous, classes, are, not, necessary, because, closures, and, lambdas, are, fully, supported, libraries, and, language, extensions, for, immutable, data, structures, are, being, developed, to, aid, programming, in, the, functional, style, in, c, many, object, oriented, design, patterns, are, expressible, in, functional, programming, terms, for, example, the, strategy, pattern, simply, dictates, use, of, a, higher, order, function, and, the, visitor, pattern, roughly, corresponds, to, a, catamorphism, or, fold, similarly, the, idea, of, immutable, data, from, functional, programming, is, often, included, in, imperative, programming, languages, for, example, the, tuple, in, python, which, is, an, immutable, array, and, object, freeze, in, javascript, logic, programming, can, be, viewed, as, a, generalisation, of, functional, programming, in, which, functions, are, a, special, case, of, relations, for, example, the, function, mother, x, y, every, x, has, only, one, mother, y, can, be, represented, by, the, relation, mother, x, y, whereas, functions, have, a, strict, input, output, pattern, of, arguments, relations, can, be, queried, with, any, pattern, of, inputs, and, outputs, consider, the, following, logic, program, the, program, can, be, queried, like, a, functional, program, to, generate, mothers, from, children, but, it, can, also, be, queried, backwards, to, generate, children, it, can, even, be, used, to, generate, all, instances, of, the, mother, relation, compared, with, relational, syntax, functional, syntax, is, a, more, compact, notation, for, nested, functions, for, example, the, definition, of, maternal, grandmother, in, functional, syntax, can, be, written, in, the, nested, form, the, same, definition, in, relational, notation, needs, to, be, written, in, the, unnested, form, here, means, if, and, means, and, however, the, difference, between, the, two, representations, is, simply, syntactic, in, ciao, prolog, relations, can, be, nested, like, functions, in, functional, programming, ciao, transforms, the, function, like, notation, into, relational, form, and, executes, the, resulting, logic, program, using, the, standard, prolog, execution, strategy, emacs, a, highly, extensible, text, editor, family, uses, its, own, lisp, dialect, for, writing, plugins, the, original, author, of, the, most, popular, emacs, implementation, gnu, emacs, and, emacs, lisp, richard, stallman, considers, lisp, one, of, his, favorite, programming, languages, helix, since, version, 24, 03, supports, previewing, ast, as, s, expressions, which, are, also, the, core, feature, of, the, lisp, programming, language, family, spreadsheets, can, be, considered, a, form, of, pure, zeroth, order, strict, evaluation, functional, programming, system, however, spreadsheets, generally, lack, higher, order, functions, as, well, as, code, reuse, and, in, some, implementations, also, lack, recursion, several, extensions, have, been, developed, for, spreadsheet, programs, to, enable, higher, order, and, reusable, functions, but, so, far, remain, primarily, academic, in, nature, functional, programming, is, an, active, area, of, research, in, the, field, of, programming, language, theory, there, are, several, peer, reviewed, publication, venues, focusing, on, functional, programming, including, the, international, conference, on, functional, programming, the, journal, of, functional, programming, and, the, symposium, on, trends, in, functional, programming, functional, programming, has, been, employed, in, a, wide, range, of, industrial, applications, for, example, erlang, which, was, developed, by, the, swedish, company, ericsson, in, the, late, 1980s, was, originally, used, to, implement, fault, tolerant, telecommunications, systems, but, has, since, become, popular, for, building, a, range, of, applications, at, companies, such, as, nortel, facebook, lectricit, de, france, and, whatsapp, scheme, a, dialect, of, lisp, was, used, as, the, basis, for, several, applications, on, early, apple, macintosh, computers, and, has, been, applied, to, problems, such, as, training, simulation, software, and, telescope, control, ocaml, which, was, introduced, in, the, mid, 1990s, has, seen, commercial, use, in, areas, such, as, financial, analysis, driver, verification, industrial, robot, programming, and, static, analysis, of, embedded, software, haskell, though, initially, intended, as, a, research, language, has, also, been, applied, in, areas, such, as, aerospace, systems, hardware, design, and, web, programming, other, functional, programming, languages, that, have, seen, use, in, industry, include, scala, f, wolfram, language, lisp, standard, ml, and, clojure, scala, has, been, widely, used, in, data, science, while, clojurescript, elm, or, purescript, are, some, of, the, functional, frontend, programming, languages, used, in, production, elixir, s, phoenix, framework, is, also, used, by, some, relatively, popular, commercial, projects, such, as, font, awesome, or, allegro, one, of, the, biggest, e, commerce, platforms, in, poland, s, classified, ads, platform, allegro, lokalnie, functional, platforms, have, been, popular, in, finance, for, risk, analytics, particularly, with, large, investment, banks, risk, factors, are, coded, as, functions, that, form, interdependent, graphs, categories, to, measure, correlations, in, market, shifts, similar, in, manner, to, gr, bner, basis, optimizations, but, also, for, regulatory, frameworks, such, as, comprehensive, capital, analysis, and, review, given, the, use, of, ocaml, and, caml, variations, in, finance, these, systems, are, sometimes, considered, related, to, a, categorical, abstract, machine, functional, programming, is, heavily, influenced, by, category, theory, many, universities, teach, functional, programming, some, treat, it, as, an, introductory, programming, concept, while, others, first, teach, imperative, programming, methods, outside, of, computer, science, functional, programming, is, used, to, teach, problem, solving, algebraic, and, geometric, concepts, it, has, also, been, used, to, teach, classical, mechanics, as, in, the, book, structure, and, interpretation, of, classical, mechanics, in, particular, scheme, has, been, a, relatively, popular, choice, for, teaching, programming, for, years