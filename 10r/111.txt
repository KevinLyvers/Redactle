https://en.wikipedia.org/wiki/Assembly_language
in, computer, programming, assembly, language, alternatively, assembler, language, or, symbolic, machine, code, often, referred, to, simply, as, assembly, and, commonly, abbreviated, as, asm, or, asm, is, any, low, level, programming, language, with, a, very, strong, correspondence, between, the, instructions, in, the, language, and, the, architecture, s, machine, code, instructions, assembly, language, usually, has, one, statement, per, machine, instruction, 1, 1, but, constants, comments, assembler, directives, symbolic, labels, of, e, g, memory, locations, registers, and, macros, are, generally, also, supported, the, first, assembly, code, in, which, a, language, is, used, to, represent, machine, code, instructions, is, found, in, kathleen, and, andrew, donald, booth, s, 1947, work, coding, for, a, r, c, assembly, code, is, converted, into, executable, machine, code, by, a, utility, program, referred, to, as, an, assembler, the, term, assembler, is, generally, attributed, to, wilkes, wheeler, and, gill, in, their, 1951, book, the, preparation, of, programs, for, an, electronic, digital, computer, who, however, used, the, term, to, mean, a, program, that, assembles, another, program, consisting, of, several, sections, into, a, single, program, the, conversion, process, is, referred, to, as, assembly, as, in, assembling, the, source, code, the, computational, step, when, an, assembler, is, processing, a, program, is, called, assembly, time, because, assembly, depends, on, the, machine, code, instructions, each, assembly, language, is, specific, to, a, particular, computer, architecture, sometimes, there, is, more, than, one, assembler, for, the, same, architecture, and, sometimes, an, assembler, is, specific, to, an, operating, system, or, to, particular, operating, systems, most, assembly, languages, do, not, provide, specific, syntax, for, operating, system, calls, and, most, assembly, languages, can, be, used, universally, with, any, operating, system, as, the, language, provides, access, to, all, the, real, capabilities, of, the, processor, upon, which, all, system, call, mechanisms, ultimately, rest, in, contrast, to, assembly, languages, most, high, level, programming, languages, are, generally, portable, across, multiple, architectures, but, require, interpreting, or, compiling, much, more, complicated, tasks, than, assembling, in, the, first, decades, of, computing, it, was, commonplace, for, both, systems, programming, and, application, programming, to, take, place, entirely, in, assembly, language, while, still, irreplaceable, for, some, purposes, the, majority, of, programming, is, now, conducted, in, higher, level, interpreted, and, compiled, languages, in, no, silver, bullet, fred, brooks, summarised, the, effects, of, the, switch, away, from, assembly, language, programming, surely, the, most, powerful, stroke, for, software, productivity, reliability, and, simplicity, has, been, the, progressive, use, of, high, level, languages, for, programming, most, observers, credit, that, development, with, at, least, a, factor, of, five, in, productivity, and, with, concomitant, gains, in, reliability, simplicity, and, comprehensibility, today, it, is, typical, to, use, small, amounts, of, assembly, language, code, within, larger, systems, implemented, in, a, higher, level, language, for, performance, reasons, or, to, interact, directly, with, hardware, in, ways, unsupported, by, the, higher, level, language, for, instance, just, under, 2, of, version, 4, 9, of, the, linux, kernel, source, code, is, written, in, assembly, more, than, 97, is, written, in, c, assembly, language, uses, a, mnemonic, to, represent, e, g, each, low, level, machine, instruction, or, opcode, each, directive, typically, also, each, architectural, register, flag, etc, some, of, the, mnemonics, may, be, built, in, and, some, user, defined, many, operations, require, one, or, more, operands, in, order, to, form, a, complete, instruction, most, assemblers, permit, named, constants, registers, and, labels, for, program, and, memory, locations, and, can, calculate, expressions, for, operands, thus, programmers, are, freed, from, tedious, repetitive, calculations, and, assembler, programs, are, much, more, readable, than, machine, code, depending, on, the, architecture, these, elements, may, also, be, combined, for, specific, instructions, or, addressing, modes, using, offsets, or, other, data, as, well, as, fixed, addresses, many, assemblers, offer, additional, mechanisms, to, facilitate, program, development, to, control, the, assembly, process, and, to, aid, debugging, some, are, column, oriented, with, specific, fields, in, specific, columns, this, was, very, common, for, machines, using, punched, cards, in, the, 1950s, and, early, 1960s, some, assemblers, have, free, form, syntax, with, fields, separated, by, delimiters, e, g, punctuation, white, space, some, assemblers, are, hybrid, with, e, g, labels, in, a, specific, column, and, other, fields, separated, by, delimiters, this, became, more, common, than, column, oriented, syntax, in, the, 1960s, an, assembler, program, creates, object, code, by, translating, combinations, of, mnemonics, and, syntax, for, operations, and, addressing, modes, into, their, numerical, equivalents, this, representation, typically, includes, an, operation, code, opcode, as, well, as, other, control, bits, and, data, the, assembler, also, calculates, constant, expressions, and, resolves, symbolic, names, for, memory, locations, and, other, entities, the, use, of, symbolic, references, is, a, key, feature, of, assemblers, saving, tedious, calculations, and, manual, address, updates, after, program, modifications, most, assemblers, also, include, macro, facilities, for, performing, textual, substitution, e, g, to, generate, common, short, sequences, of, instructions, as, inline, instead, of, called, subroutines, some, assemblers, may, also, be, able, to, perform, some, simple, types, of, instruction, set, specific, optimizations, one, concrete, example, of, this, may, be, the, ubiquitous, x86, assemblers, from, various, vendors, called, jump, sizing, most, of, them, are, able, to, perform, jump, instruction, replacements, long, jumps, replaced, by, short, or, relative, jumps, in, any, number, of, passes, on, request, others, may, even, do, simple, rearrangement, or, insertion, of, instructions, such, as, some, assemblers, for, risc, architectures, that, can, help, optimize, a, sensible, instruction, scheduling, to, exploit, the, cpu, pipeline, as, efficiently, as, possible, assemblers, have, been, available, since, the, 1950s, as, the, first, step, above, machine, language, and, before, high, level, programming, languages, such, as, fortran, algol, cobol, and, lisp, there, have, also, been, several, classes, of, translators, and, semi, automatic, code, generators, with, properties, similar, to, both, assembly, and, high, level, languages, with, speedcode, as, perhaps, one, of, the, better, known, examples, there, may, be, several, assemblers, with, different, syntax, for, a, particular, cpu, or, instruction, set, architecture, for, instance, an, instruction, to, add, memory, data, to, a, register, in, a, x86, family, processor, might, be, add, eax, in, original, intel, syntax, whereas, this, would, be, written, addl, ebx, eax, in, the, at, t, syntax, used, by, the, gnu, assembler, despite, different, appearances, different, syntactic, forms, generally, generate, the, same, numeric, machine, code, a, single, assembler, may, also, have, different, modes, in, order, to, support, variations, in, syntactic, forms, as, well, as, their, exact, semantic, interpretations, such, as, fasm, syntax, tasm, syntax, ideal, mode, etc, in, the, special, case, of, x86, assembly, programming, there, are, two, types, of, assemblers, based, on, how, many, passes, through, the, source, are, needed, how, many, times, the, assembler, reads, the, source, to, produce, the, object, file, in, both, cases, the, assembler, must, be, able, to, determine, the, size, of, each, instruction, on, the, initial, passes, in, order, to, calculate, the, addresses, of, subsequent, symbols, this, means, that, if, the, size, of, an, operation, referring, to, an, operand, defined, later, depends, on, the, type, or, distance, of, the, operand, the, assembler, will, make, a, pessimistic, estimate, when, first, encountering, the, operation, and, if, necessary, pad, it, with, one, or, more, no, operation, instructions, in, a, later, pass, or, the, errata, in, an, assembler, with, peephole, optimization, addresses, may, be, recalculated, between, passes, to, allow, replacing, pessimistic, code, with, code, tailored, to, the, exact, distance, from, the, target, the, original, reason, for, the, use, of, one, pass, assemblers, was, memory, size, and, speed, of, assembly, often, a, second, pass, would, require, storing, the, symbol, table, in, memory, to, handle, forward, references, rewinding, and, rereading, the, program, source, on, tape, or, rereading, a, deck, of, cards, or, punched, paper, tape, later, computers, with, much, larger, memories, especially, disc, storage, had, the, space, to, perform, all, necessary, processing, without, such, re, reading, the, advantage, of, the, multi, pass, assembler, is, that, the, absence, of, errata, makes, the, linking, process, or, the, program, load, if, the, assembler, directly, produces, executable, code, faster, example, in, the, following, code, snippet, a, one, pass, assembler, would, be, able, to, determine, the, address, of, the, backward, reference, bkwd, when, assembling, statement, s2, but, would, not, be, able, to, determine, the, address, of, the, forward, reference, fwd, when, assembling, the, branch, statement, s1, indeed, fwd, may, be, undefined, a, two, pass, assembler, would, determine, both, addresses, in, pass, 1, so, they, would, be, known, when, generating, code, in, pass, 2, more, sophisticated, high, level, assemblers, provide, language, abstractions, such, as, see, language, design, below, for, more, details, a, program, written, in, assembly, language, consists, of, a, series, of, mnemonic, processor, instructions, and, meta, statements, known, variously, as, declarative, operations, directives, pseudo, instructions, pseudo, operations, and, pseudo, ops, comments, and, data, assembly, language, instructions, usually, consist, of, an, opcode, mnemonic, followed, by, an, operand, which, might, be, a, list, of, data, arguments, or, parameters, some, instructions, may, be, implied, which, means, the, data, upon, which, the, instruction, operates, is, implicitly, defined, by, the, instruction, itself, such, an, instruction, does, not, take, an, operand, the, resulting, statement, is, translated, by, an, assembler, into, machine, language, instructions, that, can, be, loaded, into, memory, and, executed, for, example, the, instruction, below, tells, an, x86, ia, 32, processor, to, move, an, immediate, 8, bit, value, into, a, register, the, binary, code, for, this, instruction, is, 10110, followed, by, a, 3, bit, identifier, for, which, register, to, use, the, identifier, for, the, al, register, is, 000, so, the, following, machine, code, loads, the, al, register, with, the, data, 01100001, this, binary, computer, code, can, be, made, more, human, readable, by, expressing, it, in, hexadecimal, as, follows, here, b0, means, move, a, copy, of, the, following, value, into, al, and, 61, is, a, hexadecimal, representation, of, the, value, 01100001, which, is, 97, in, decimal, assembly, language, for, the, 8086, family, provides, the, mnemonic, mov, an, abbreviation, of, move, for, instructions, such, as, this, so, the, machine, code, above, can, be, written, as, follows, in, assembly, language, complete, with, an, explanatory, comment, if, required, after, the, semicolon, this, is, much, easier, to, read, and, to, remember, in, some, assembly, languages, including, this, one, the, same, mnemonic, such, as, mov, may, be, used, for, a, family, of, related, instructions, for, loading, copying, and, moving, data, whether, these, are, immediate, values, values, in, registers, or, memory, locations, pointed, to, by, values, in, registers, or, by, immediate, a, k, a, direct, addresses, other, assemblers, may, use, separate, opcode, mnemonics, such, as, l, for, move, memory, to, register, st, for, move, register, to, memory, lr, for, move, register, to, register, mvi, for, move, immediate, operand, to, memory, etc, if, the, same, mnemonic, is, used, for, different, instructions, that, means, that, the, mnemonic, corresponds, to, several, different, binary, instruction, codes, excluding, data, e, g, the, 61h, in, this, example, depending, on, the, operands, that, follow, the, mnemonic, for, example, for, the, x86, ia, 32, cpus, the, intel, assembly, language, syntax, mov, al, ah, represents, an, instruction, that, moves, the, contents, of, register, ah, into, register, al, the, hexadecimal, form, of, this, instruction, is, the, first, byte, 88h, identifies, a, move, between, a, byte, sized, register, and, either, another, register, or, memory, and, the, second, byte, e0h, is, encoded, with, three, bit, fields, to, specify, that, both, operands, are, registers, the, source, is, ah, and, the, destination, is, al, in, a, case, like, this, where, the, same, mnemonic, can, represent, more, than, one, binary, instruction, the, assembler, determines, which, instruction, to, generate, by, examining, the, operands, in, the, first, example, the, operand, 61h, is, a, valid, hexadecimal, numeric, constant, and, is, not, a, valid, register, name, so, only, the, b0, instruction, can, be, applicable, in, the, second, example, the, operand, ah, is, a, valid, register, name, and, not, a, valid, numeric, constant, hexadecimal, decimal, octal, or, binary, so, only, the, 88, instruction, can, be, applicable, assembly, languages, are, always, designed, so, that, this, sort, of, lack, of, ambiguity, is, universally, enforced, by, their, syntax, for, example, in, the, intel, x86, assembly, language, a, hexadecimal, constant, must, start, with, a, numeral, digit, so, that, the, hexadecimal, number, a, equal, to, decimal, ten, would, be, written, as, 0ah, or, 0ah, not, ah, specifically, so, that, it, cannot, appear, to, be, the, name, of, register, ah, the, same, rule, also, prevents, ambiguity, with, the, names, of, registers, bh, ch, and, dh, as, well, as, with, any, user, defined, symbol, that, ends, with, the, letter, h, and, otherwise, contains, only, characters, that, are, hexadecimal, digits, such, as, the, word, beach, returning, to, the, original, example, while, the, x86, opcode, 10110000, b0, copies, an, 8, bit, value, into, the, al, register, 10110001, b1, moves, it, into, cl, and, 10110010, b2, does, so, into, dl, assembly, language, examples, for, these, follow, the, syntax, of, mov, can, also, be, more, complex, as, the, following, examples, show, in, each, case, the, mov, mnemonic, is, translated, directly, into, one, of, the, opcodes, 88, 8c, 8e, a0, a3, b0, bf, c6, or, c7, by, an, assembler, and, the, programmer, normally, does, not, have, to, know, or, remember, which, transforming, assembly, language, into, machine, code, is, the, job, of, an, assembler, and, the, reverse, can, at, least, partially, be, achieved, by, a, disassembler, unlike, high, level, languages, there, is, a, one, to, one, correspondence, between, many, simple, assembly, statements, and, machine, language, instructions, however, in, some, cases, an, assembler, may, provide, pseudoinstructions, essentially, macros, which, expand, into, several, machine, language, instructions, to, provide, commonly, needed, functionality, for, example, for, a, machine, that, lacks, a, branch, if, greater, or, equal, instruction, an, assembler, may, provide, a, pseudoinstruction, that, expands, to, the, machine, s, set, if, less, than, and, branch, if, zero, on, the, result, of, the, set, instruction, most, full, featured, assemblers, also, provide, a, rich, macro, language, discussed, below, which, is, used, by, vendors, and, programmers, to, generate, more, complex, code, and, data, sequences, since, the, information, about, pseudoinstructions, and, macros, defined, in, the, assembler, environment, is, not, present, in, the, object, program, a, disassembler, cannot, reconstruct, the, macro, and, pseudoinstruction, invocations, but, can, only, disassemble, the, actual, machine, instructions, that, the, assembler, generated, from, those, abstract, assembly, language, entities, likewise, since, comments, in, the, assembly, language, source, file, are, ignored, by, the, assembler, and, have, no, effect, on, the, object, code, it, generates, a, disassembler, is, always, completely, unable, to, recover, source, comments, each, computer, architecture, has, its, own, machine, language, computers, differ, in, the, number, and, type, of, operations, they, support, in, the, different, sizes, and, numbers, of, registers, and, in, the, representations, of, data, in, storage, while, most, general, purpose, computers, are, able, to, carry, out, essentially, the, same, functionality, the, ways, they, do, so, differ, the, corresponding, assembly, languages, reflect, these, differences, multiple, sets, of, mnemonics, or, assembly, language, syntax, may, exist, for, a, single, instruction, set, typically, instantiated, in, different, assembler, programs, in, these, cases, the, most, popular, one, is, usually, that, supplied, by, the, cpu, manufacturer, and, used, in, its, documentation, two, examples, of, cpus, that, have, two, different, sets, of, mnemonics, are, the, intel, 8080, family, and, the, intel, 8086, 8088, because, intel, claimed, copyright, on, its, assembly, language, mnemonics, on, each, page, of, their, documentation, published, in, the, 1970s, and, early, 1980s, at, least, some, companies, that, independently, produced, cpus, compatible, with, intel, instruction, sets, invented, their, own, mnemonics, the, zilog, z80, cpu, an, enhancement, of, the, intel, 8080a, supports, all, the, 8080a, instructions, plus, many, more, zilog, invented, an, entirely, new, assembly, language, not, only, for, the, new, instructions, but, also, for, all, of, the, 8080a, instructions, for, example, where, intel, uses, the, mnemonics, mov, mvi, lda, sta, lxi, ldax, stax, lhld, and, shld, for, various, data, transfer, instructions, the, z80, assembly, language, uses, the, mnemonic, ld, for, all, of, them, a, similar, case, is, the, nec, v20, and, v30, cpus, enhanced, copies, of, the, intel, 8086, and, 8088, respectively, like, zilog, with, the, z80, nec, invented, new, mnemonics, for, all, of, the, 8086, and, 8088, instructions, to, avoid, accusations, of, infringement, of, intel, s, copyright, it, is, questionable, whether, such, copyrights, can, be, valid, and, later, cpu, companies, such, as, amd, and, cyrix, republished, intel, s, x86, ia, 32, instruction, mnemonics, exactly, with, neither, permission, nor, legal, penalty, it, is, doubtful, whether, in, practice, many, people, who, programmed, the, v20, and, v30, actually, wrote, in, nec, s, assembly, language, rather, than, intel, s, since, any, two, assembly, languages, for, the, same, instruction, set, architecture, are, isomorphic, somewhat, like, english, and, pig, latin, there, is, no, requirement, to, use, a, manufacturer, s, own, published, assembly, language, with, that, manufacturer, s, products, there, is, a, large, degree, of, diversity, in, the, way, the, authors, of, assemblers, categorize, statements, and, in, the, nomenclature, that, they, use, in, particular, some, describe, anything, other, than, a, machine, mnemonic, or, extended, mnemonic, as, a, pseudo, operation, pseudo, op, a, typical, assembly, language, consists, of, 3, types, of, instruction, statements, that, are, used, to, define, program, operations, instructions, statements, in, assembly, language, are, generally, very, simple, unlike, those, in, high, level, languages, generally, a, mnemonic, is, a, symbolic, name, for, a, single, executable, machine, language, instruction, an, opcode, and, there, is, at, least, one, opcode, mnemonic, defined, for, each, machine, language, instruction, each, instruction, typically, consists, of, an, operation, or, opcode, plus, zero, or, more, operands, most, instructions, refer, to, a, single, value, or, a, pair, of, values, operands, can, be, immediate, value, coded, in, the, instruction, itself, registers, specified, in, the, instruction, or, implied, or, the, addresses, of, data, located, elsewhere, in, storage, this, is, determined, by, the, underlying, processor, architecture, the, assembler, merely, reflects, how, this, architecture, works, extended, mnemonics, are, often, used, to, specify, a, combination, of, an, opcode, with, a, specific, operand, e, g, the, system, 360, assemblers, use, b, as, an, extended, mnemonic, for, bc, with, a, mask, of, 15, and, nop, no, operation, do, nothing, for, one, step, for, bc, with, a, mask, of, 0, extended, mnemonics, are, often, used, to, support, specialized, uses, of, instructions, often, for, purposes, not, obvious, from, the, instruction, name, for, example, many, cpu, s, do, not, have, an, explicit, nop, instruction, but, do, have, instructions, that, can, be, used, for, the, purpose, in, 8086, cpus, the, instruction, xchg, ax, ax, is, used, for, nop, with, nop, being, a, pseudo, opcode, to, encode, the, instruction, xchg, ax, ax, some, disassemblers, recognize, this, and, will, decode, the, xchg, ax, ax, instruction, as, nop, similarly, ibm, assemblers, for, system, 360, and, system, 370, use, the, extended, mnemonics, nop, and, nopr, for, bc, and, bcr, with, zero, masks, for, the, sparc, architecture, these, are, known, as, synthetic, instructions, some, assemblers, also, support, simple, built, in, macro, instructions, that, generate, two, or, more, machine, instructions, for, instance, with, some, z80, assemblers, the, instruction, ld, hl, bc, is, recognized, to, generate, ld, l, c, followed, by, ld, h, b, these, are, sometimes, known, as, pseudo, opcodes, mnemonics, are, arbitrary, symbols, in, 1985, the, ieee, published, standard, 694, for, a, uniform, set, of, mnemonics, to, be, used, by, all, assemblers, the, standard, has, since, been, withdrawn, there, are, instructions, used, to, define, data, elements, to, hold, data, and, variables, they, define, the, type, of, data, the, length, and, the, alignment, of, data, these, instructions, can, also, define, whether, the, data, is, available, to, outside, programs, programs, assembled, separately, or, only, to, the, program, in, which, the, data, section, is, defined, some, assemblers, classify, these, as, pseudo, ops, assembly, directives, also, called, pseudo, opcodes, pseudo, operations, or, pseudo, ops, are, commands, given, to, an, assembler, directing, it, to, perform, operations, other, than, assembling, instructions, directives, affect, how, the, assembler, operates, and, may, affect, the, object, code, the, symbol, table, the, listing, file, and, the, values, of, internal, assembler, parameters, sometimes, the, term, pseudo, opcode, is, reserved, for, directives, that, generate, object, code, such, as, those, that, generate, data, the, names, of, pseudo, ops, often, start, with, a, dot, to, distinguish, them, from, machine, instructions, pseudo, ops, can, make, the, assembly, of, the, program, dependent, on, parameters, input, by, a, programmer, so, that, one, program, can, be, assembled, in, different, ways, perhaps, for, different, applications, or, a, pseudo, op, can, be, used, to, manipulate, presentation, of, a, program, to, make, it, easier, to, read, and, maintain, another, common, use, of, pseudo, ops, is, to, reserve, storage, areas, for, run, time, data, and, optionally, initialize, their, contents, to, known, values, symbolic, assemblers, let, programmers, associate, arbitrary, names, labels, or, symbols, with, memory, locations, and, various, constants, usually, every, constant, and, variable, is, given, a, name, so, instructions, can, reference, those, locations, by, name, thus, promoting, self, documenting, code, in, executable, code, the, name, of, each, subroutine, is, associated, with, its, entry, point, so, any, calls, to, a, subroutine, can, use, its, name, inside, subroutines, goto, destinations, are, given, labels, some, assemblers, support, local, symbols, which, are, often, lexically, distinct, from, normal, symbols, e, g, the, use, of, 10, as, a, goto, destination, some, assemblers, such, as, nasm, provide, flexible, symbol, management, letting, programmers, manage, different, namespaces, automatically, calculate, offsets, within, data, structures, and, assign, labels, that, refer, to, literal, values, or, the, result, of, simple, computations, performed, by, the, assembler, labels, can, also, be, used, to, initialize, constants, and, variables, with, relocatable, addresses, assembly, languages, like, most, other, computer, languages, allow, comments, to, be, added, to, program, source, code, that, will, be, ignored, during, assembly, judicious, commenting, is, essential, in, assembly, language, programs, as, the, meaning, and, purpose, of, a, sequence, of, binary, machine, instructions, can, be, difficult, to, determine, the, raw, uncommented, assembly, language, generated, by, compilers, or, disassemblers, is, quite, difficult, to, read, when, changes, must, be, made, many, assemblers, support, predefined, macros, and, others, support, programmer, defined, and, repeatedly, re, definable, macros, involving, sequences, of, text, lines, in, which, variables, and, constants, are, embedded, the, macro, definition, is, most, commonly, a, mixture, of, assembler, statements, e, g, directives, symbolic, machine, instructions, and, templates, for, assembler, statements, this, sequence, of, text, lines, may, include, opcodes, or, directives, once, a, macro, has, been, defined, its, name, may, be, used, in, place, of, a, mnemonic, when, the, assembler, processes, such, a, statement, it, replaces, the, statement, with, the, text, lines, associated, with, that, macro, then, processes, them, as, if, they, existed, in, the, source, code, file, including, in, some, assemblers, expansion, of, any, macros, existing, in, the, replacement, text, macros, in, this, sense, date, to, ibm, autocoders, of, the, 1950s, macro, assemblers, typically, have, directives, to, e, g, define, macros, define, variables, set, variables, to, the, result, of, an, arithmetic, logical, or, string, expression, iterate, conditionally, generate, code, some, of, those, directives, may, be, restricted, to, use, within, a, macro, definition, e, g, mexit, in, hlasm, while, others, may, be, permitted, within, open, code, outside, macro, definitions, e, g, aif, and, copy, in, hlasm, in, assembly, language, the, term, macro, represents, a, more, comprehensive, concept, than, it, does, in, some, other, contexts, such, as, the, pre, processor, in, the, c, programming, language, where, its, define, directive, typically, is, used, to, create, short, single, line, macros, assembler, macro, instructions, like, macros, in, pl, i, and, some, other, languages, can, be, lengthy, programs, by, themselves, executed, by, interpretation, by, the, assembler, during, assembly, since, macros, can, have, short, names, but, expand, to, several, or, indeed, many, lines, of, code, they, can, be, used, to, make, assembly, language, programs, appear, to, be, far, shorter, requiring, fewer, lines, of, source, code, as, with, higher, level, languages, they, can, also, be, used, to, add, higher, levels, of, structure, to, assembly, programs, optionally, introduce, embedded, debugging, code, via, parameters, and, other, similar, features, macro, assemblers, often, allow, macros, to, take, parameters, some, assemblers, include, quite, sophisticated, macro, languages, incorporating, such, high, level, language, elements, as, optional, parameters, symbolic, variables, conditionals, string, manipulation, and, arithmetic, operations, all, usable, during, the, execution, of, a, given, macro, and, allowing, macros, to, save, context, or, exchange, information, thus, a, macro, might, generate, numerous, assembly, language, instructions, or, data, definitions, based, on, the, macro, arguments, this, could, be, used, to, generate, record, style, data, structures, or, unrolled, loops, for, example, or, could, generate, entire, algorithms, based, on, complex, parameters, for, instance, a, sort, macro, could, accept, the, specification, of, a, complex, sort, key, and, generate, code, crafted, for, that, specific, key, not, needing, the, run, time, tests, that, would, be, required, for, a, general, procedure, interpreting, the, specification, an, organization, using, assembly, language, that, has, been, heavily, extended, using, such, a, macro, suite, can, be, considered, to, be, working, in, a, higher, level, language, since, such, programmers, are, not, working, with, a, computer, s, lowest, level, conceptual, elements, underlining, this, point, macros, were, used, to, implement, an, early, virtual, machine, in, snobol4, 1967, which, was, written, in, the, snobol, implementation, language, sil, an, assembly, language, for, a, virtual, machine, the, target, machine, would, translate, this, to, its, native, code, using, a, macro, assembler, this, allowed, a, high, degree, of, portability, for, the, time, macros, were, used, to, customize, large, scale, software, systems, for, specific, customers, in, the, mainframe, era, and, were, also, used, by, customer, personnel, to, satisfy, their, employers, needs, by, making, specific, versions, of, manufacturer, operating, systems, this, was, done, for, example, by, systems, programmers, working, with, ibm, s, conversational, monitor, system, virtual, machine, vm, cms, and, with, ibm, s, real, time, transaction, processing, add, ons, customer, information, control, system, cics, and, acp, tpf, the, airline, financial, system, that, began, in, the, 1970s, and, still, runs, many, large, computer, reservation, systems, crs, and, credit, card, systems, today, it, is, also, possible, to, use, solely, the, macro, processing, abilities, of, an, assembler, to, generate, code, written, in, completely, different, languages, for, example, to, generate, a, version, of, a, program, in, cobol, using, a, pure, macro, assembler, program, containing, lines, of, cobol, code, inside, assembly, time, operators, instructing, the, assembler, to, generate, arbitrary, code, ibm, os, 360, uses, macros, to, perform, system, generation, the, user, specifies, options, by, coding, a, series, of, assembler, macros, assembling, these, macros, generates, a, job, stream, to, build, the, system, including, job, control, language, and, utility, control, statements, this, is, because, as, was, realized, in, the, 1960s, the, concept, of, macro, processing, is, independent, of, the, concept, of, assembly, the, former, being, in, modern, terms, more, word, processing, text, processing, than, generating, object, code, the, concept, of, macro, processing, appeared, and, appears, in, the, c, programming, language, which, supports, preprocessor, instructions, to, set, variables, and, make, conditional, tests, on, their, values, unlike, certain, previous, macro, processors, inside, assemblers, the, c, preprocessor, is, not, turing, complete, because, it, lacks, the, ability, to, either, loop, or, go, to, the, latter, allowing, programs, to, loop, despite, the, power, of, macro, processing, it, fell, into, disuse, in, many, high, level, languages, major, exceptions, being, c, c, and, pl, i, while, remaining, a, perennial, for, assemblers, macro, parameter, substitution, is, strictly, by, name, at, macro, processing, time, the, value, of, a, parameter, is, textually, substituted, for, its, name, the, most, famous, class, of, bugs, resulting, was, the, use, of, a, parameter, that, itself, was, an, expression, and, not, a, simple, name, when, the, macro, writer, expected, a, name, in, the, macro, the, intention, was, that, the, caller, would, provide, the, name, of, a, variable, and, the, global, variable, or, constant, b, would, be, used, to, multiply, a, if, foo, is, called, with, the, parameter, a, c, the, macro, expansion, of, load, a, c, b, occurs, to, avoid, any, possible, ambiguity, users, of, macro, processors, can, parenthesize, formal, parameters, inside, macro, definitions, or, callers, can, parenthesize, the, input, parameters, packages, of, macros, have, been, written, providing, structured, programming, elements, to, encode, execution, flow, the, earliest, example, of, this, approach, was, in, the, concept, 14, macro, set, originally, proposed, by, harlan, mills, march, 1970, and, implemented, by, marvin, kessler, at, ibm, s, federal, systems, division, which, provided, if, else, endif, and, similar, control, flow, blocks, for, os, 360, assembler, programs, this, was, a, way, to, reduce, or, eliminate, the, use, of, goto, operations, in, assembly, code, one, of, the, main, factors, causing, spaghetti, code, in, assembly, language, this, approach, was, widely, accepted, in, the, early, 1980s, the, latter, days, of, large, scale, assembly, language, use, ibm, s, high, level, assembler, toolkit, includes, such, a, macro, package, another, design, was, a, natural, a, stream, oriented, assembler, for, 8080, z80, processors, from, whitesmiths, ltd, developers, of, the, unix, like, idris, operating, system, and, what, was, reported, to, be, the, first, commercial, c, compiler, the, language, was, classified, as, an, assembler, because, it, worked, with, raw, machine, elements, such, as, opcodes, registers, and, memory, references, but, it, incorporated, an, expression, syntax, to, indicate, execution, order, parentheses, and, other, special, symbols, along, with, block, oriented, structured, programming, constructs, controlled, the, sequence, of, the, generated, instructions, a, natural, was, built, as, the, object, language, of, a, c, compiler, rather, than, for, hand, coding, but, its, logical, syntax, won, some, fans, there, has, been, little, apparent, demand, for, more, sophisticated, assemblers, since, the, decline, of, large, scale, assembly, language, development, in, spite, of, that, they, are, still, being, developed, and, applied, in, cases, where, resource, constraints, or, peculiarities, in, the, target, system, s, architecture, prevent, the, effective, use, of, higher, level, languages, assemblers, with, a, strong, macro, engine, allow, structured, programming, via, macros, such, as, the, switch, macro, provided, with, the, masm32, package, this, code, is, a, complete, program, assembly, languages, were, not, available, at, the, time, when, the, stored, program, computer, was, introduced, programs, were, written, in, absolute, machine, code, and, loaded, into, the, computer, from, punched, paper, tape, or, toggled, directly, into, memory, from, console, switches, kathleen, booth, is, credited, with, inventing, assembly, language, based, on, theoretical, work, she, began, in, 1947, while, working, on, the, arc2, at, birkbeck, university, of, london, following, consultation, by, andrew, booth, later, her, husband, with, mathematician, john, von, neumann, and, physicist, herman, goldstine, at, the, institute, for, advanced, study, in, late, 1948, the, electronic, delay, storage, automatic, calculator, edsac, had, an, assembler, named, initial, orders, integrated, into, its, bootstrap, program, it, used, one, letter, mnemonics, developed, by, david, wheeler, who, is, credited, by, the, ieee, computer, society, as, the, creator, of, the, first, assembler, reports, on, the, edsac, introduced, the, term, assembly, for, the, process, of, combining, fields, into, an, instruction, word, soap, symbolic, optimal, assembly, program, was, an, assembly, language, for, the, ibm, 650, computer, written, by, stan, poley, in, 1955, assembly, languages, eliminate, much, of, the, error, prone, tedious, and, time, consuming, first, generation, programming, needed, with, the, earliest, computers, freeing, programmers, from, tedium, such, as, remembering, numeric, codes, and, calculating, addresses, they, were, once, widely, used, for, all, sorts, of, programming, however, by, the, late, 1950s, their, use, had, largely, been, supplanted, by, higher, level, languages, in, the, search, for, improved, programming, productivity, today, assembly, language, is, still, used, for, direct, hardware, manipulation, access, to, specialized, processor, instructions, or, to, address, critical, performance, issues, typical, uses, are, device, drivers, low, level, embedded, systems, and, real, time, systems, see, current, usage, numerous, programs, have, been, written, entirely, in, assembly, language, the, burroughs, mcp, 1961, was, the, first, computer, for, which, an, operating, system, was, not, developed, entirely, in, assembly, language, it, was, written, in, executive, systems, problem, oriented, language, espol, an, algol, dialect, many, commercial, applications, were, written, in, assembly, language, as, well, including, a, large, amount, of, the, ibm, mainframe, software, written, by, large, corporations, cobol, fortran, and, some, pl, i, eventually, displaced, much, of, this, work, although, a, number, of, large, organizations, retained, assembly, language, application, infrastructures, well, into, the, 1990s, assembly, language, has, long, been, the, primary, development, language, for, 8, bit, home, computers, such, as, the, apple, ii, atari, 8, bit, computers, msx, zx, spectrum, and, commodore, 64, interpreted, basic, dialects, on, these, systems, offer, insufficient, execution, speed, and, insufficient, facilities, to, take, full, advantage, of, the, available, hardware, these, systems, have, severe, resource, constraints, idiosyncratic, memory, and, display, architectures, and, provide, limited, system, services, there, are, also, few, high, level, language, compilers, suitable, for, microcomputer, use, similarly, assembly, language, is, the, default, choice, for, 8, bit, consoles, such, as, the, atari, 2600, and, nintendo, entertainment, system, key, software, for, ibm, pc, compatibles, was, written, in, assembly, language, such, as, ms, dos, turbo, pascal, and, the, lotus, 1, 2, 3, spreadsheet, as, computer, speed, grew, exponentially, assembly, language, became, a, tool, for, speeding, up, parts, of, programs, such, as, the, rendering, of, doom, rather, than, a, dominant, development, language, in, the, 1990s, assembly, language, was, used, to, get, performance, out, of, systems, such, as, the, sega, saturn, and, as, the, primary, language, for, arcade, hardware, based, on, the, tms34010, integrated, cpu, gpu, such, as, mortal, kombat, and, nba, jam, there, has, been, debate, over, the, usefulness, and, performance, of, assembly, language, relative, to, high, level, languages, although, assembly, language, has, specific, niche, uses, where, it, is, important, see, below, there, are, other, tools, for, optimization, as, of, july, 2017, the, tiobe, index, of, programming, language, popularity, ranks, assembly, language, at, 11, ahead, of, visual, basic, for, example, assembler, can, be, used, to, optimize, for, speed, or, optimize, for, size, in, the, case, of, speed, optimization, modern, optimizing, compilers, are, claimed, to, render, high, level, languages, into, code, that, can, run, as, fast, as, hand, written, assembly, despite, the, counter, examples, that, can, be, found, the, complexity, of, modern, processors, and, memory, sub, systems, makes, effective, optimization, increasingly, difficult, for, compilers, as, well, as, for, assembly, programmers, moreover, increasing, processor, performance, has, meant, that, most, cpus, sit, idle, most, of, the, time, with, delays, caused, by, predictable, bottlenecks, such, as, cache, misses, i, o, operations, and, paging, this, has, made, raw, code, execution, speed, a, non, issue, for, many, programmers, there, are, some, situations, in, which, developers, might, choose, to, use, assembly, language, assembly, language, is, still, taught, in, most, computer, science, and, electronic, engineering, programs, although, few, programmers, today, regularly, work, with, assembly, language, as, a, tool, the, underlying, concepts, remain, important, such, fundamental, topics, as, binary, arithmetic, memory, allocation, stack, processing, character, set, encoding, interrupt, processing, and, compiler, design, would, be, hard, to, study, in, detail, without, a, grasp, of, how, a, computer, operates, at, the, hardware, level, since, a, computer, s, behavior, is, fundamentally, defined, by, its, instruction, set, the, logical, way, to, learn, such, concepts, is, to, study, an, assembly, language, most, modern, computers, have, similar, instruction, sets, therefore, studying, a, single, assembly, language, is, sufficient, to, learn, i, the, basic, concepts, ii, to, recognize, situations, where, the, use, of, assembly, language, might, be, appropriate, and, iii, to, see, how, efficient, executable, code, can, be, created, from, high, level, languages