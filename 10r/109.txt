https://en.wikipedia.org/wiki/Compiler
in, computing, a, compiler, is, a, computer, program, that, translates, computer, code, written, in, one, programming, language, the, source, language, into, another, language, the, target, language, the, name, compiler, is, primarily, used, for, programs, that, translate, source, code, from, a, high, level, programming, language, to, a, low, level, programming, language, e, g, assembly, language, object, code, or, machine, code, to, create, an, executable, program, p1, there, are, many, different, types, of, compilers, which, produce, output, in, different, useful, forms, a, cross, compiler, produces, code, for, a, different, cpu, or, operating, system, than, the, one, on, which, the, cross, compiler, itself, runs, a, bootstrap, compiler, is, often, a, temporary, compiler, used, for, compiling, a, more, permanent, or, better, optimised, compiler, for, a, language, related, software, include, decompilers, programs, that, translate, from, low, level, languages, to, higher, level, ones, programs, that, translate, between, high, level, languages, usually, called, source, to, source, compilers, or, transpilers, language, rewriters, usually, programs, that, translate, the, form, of, expressions, without, a, change, of, language, and, compiler, compilers, compilers, that, produce, compilers, or, parts, of, them, often, in, a, generic, and, reusable, way, so, as, to, be, able, to, produce, many, differing, compilers, a, compiler, is, likely, to, perform, some, or, all, of, the, following, operations, often, called, phases, preprocessing, lexical, analysis, parsing, semantic, analysis, syntax, directed, translation, conversion, of, input, programs, to, an, intermediate, representation, code, optimization, and, machine, specific, code, generation, compilers, generally, implement, these, phases, as, modular, components, promoting, efficient, design, and, correctness, of, transformations, of, source, input, to, target, output, program, faults, caused, by, incorrect, compiler, behavior, can, be, very, difficult, to, track, down, and, work, around, therefore, compiler, implementers, invest, significant, effort, to, ensure, compiler, correctness, compilers, are, not, the, only, language, processor, used, to, transform, source, programs, an, interpreter, is, computer, software, that, transforms, and, then, executes, the, indicated, operations, p2, the, translation, process, influences, the, design, of, computer, languages, which, leads, to, a, preference, of, compilation, or, interpretation, in, theory, a, programming, language, can, have, both, a, compiler, and, an, interpreter, in, practice, programming, languages, tend, to, be, associated, with, just, one, a, compiler, or, an, interpreter, theoretical, computing, concepts, developed, by, scientists, mathematicians, and, engineers, formed, the, basis, of, digital, modern, computing, development, during, world, war, ii, primitive, binary, languages, evolved, because, digital, devices, only, understand, ones, and, zeros, and, the, circuit, patterns, in, the, underlying, machine, architecture, in, the, late, 1940s, assembly, languages, were, created, to, offer, a, more, workable, abstraction, of, the, computer, architectures, limited, memory, capacity, of, early, computers, led, to, substantial, technical, challenges, when, the, first, compilers, were, designed, therefore, the, compilation, process, needed, to, be, divided, into, several, small, programs, the, front, end, programs, produce, the, analysis, products, used, by, the, back, end, programs, to, generate, target, code, as, computer, technology, provided, more, resources, compiler, designs, could, align, better, with, the, compilation, process, it, is, usually, more, productive, for, a, programmer, to, use, a, high, level, language, so, the, development, of, high, level, languages, followed, naturally, from, the, capabilities, offered, by, digital, computers, high, level, languages, are, formal, languages, that, are, strictly, defined, by, their, syntax, and, semantics, which, form, the, high, level, language, architecture, elements, of, these, formal, languages, include, the, sentences, in, a, language, may, be, defined, by, a, set, of, rules, called, a, grammar, backus, naur, form, bnf, describes, the, syntax, of, sentences, of, a, language, it, was, developed, by, john, backus, and, used, for, the, syntax, of, algol, 60, the, ideas, derive, from, the, context, free, grammar, concepts, by, linguist, noam, chomsky, bnf, and, its, extensions, have, become, standard, tools, for, describing, the, syntax, of, programming, notations, in, many, cases, parts, of, compilers, are, generated, automatically, from, a, bnf, description, between, 1942, and, 1945, konrad, zuse, designed, the, first, algorithmic, programming, language, for, computers, called, plankalk, l, plan, calculus, zuse, also, envisioned, a, planfertigungsger, t, plan, assembly, device, to, automatically, translate, the, mathematical, formulation, of, a, program, into, machine, readable, punched, film, stock, while, no, actual, implementation, occurred, until, the, 1970s, it, presented, concepts, later, seen, in, apl, designed, by, ken, iverson, in, the, late, 1950s, apl, is, a, language, for, mathematical, computations, between, 1949, and, 1951, heinz, rutishauser, proposed, superplan, a, high, level, language, and, automatic, translator, his, ideas, were, later, refined, by, friedrich, l, bauer, and, klaus, samelson, high, level, language, design, during, the, formative, years, of, digital, computing, provided, useful, programming, tools, for, a, variety, of, applications, compiler, technology, evolved, from, the, need, for, a, strictly, defined, transformation, of, the, high, level, source, program, into, a, low, level, target, program, for, the, digital, computer, the, compiler, could, be, viewed, as, a, front, end, to, deal, with, the, analysis, of, the, source, code, and, a, back, end, to, synthesize, the, analysis, into, the, target, code, optimization, between, the, front, end, and, back, end, could, produce, more, efficient, target, code, some, early, milestones, in, the, development, of, compiler, technology, early, operating, systems, and, software, were, written, in, assembly, language, in, the, 1960s, and, early, 1970s, the, use, of, high, level, languages, for, system, programming, was, still, controversial, due, to, resource, limitations, however, several, research, and, industry, efforts, began, the, shift, toward, high, level, systems, programming, languages, for, example, bcpl, bliss, b, and, c, bcpl, basic, combined, programming, language, designed, in, 1966, by, martin, richards, at, the, university, of, cambridge, was, originally, developed, as, a, compiler, writing, tool, several, compilers, have, been, implemented, richards, book, provides, insights, to, the, language, and, its, compiler, bcpl, was, not, only, an, influential, systems, programming, language, that, is, still, used, in, research, but, also, provided, a, basis, for, the, design, of, b, and, c, languages, bliss, basic, language, for, implementation, of, system, software, was, developed, for, a, digital, equipment, corporation, dec, pdp, 10, computer, by, w, a, wulf, s, carnegie, mellon, university, cmu, research, team, the, cmu, team, went, on, to, develop, bliss, 11, compiler, one, year, later, in, 1970, multics, multiplexed, information, and, computing, service, a, time, sharing, operating, system, project, involved, mit, bell, labs, general, electric, later, honeywell, and, was, led, by, fernando, corbat, from, mit, multics, was, written, in, the, pl, i, language, developed, by, ibm, and, ibm, user, group, ibm, s, goal, was, to, satisfy, business, scientific, and, systems, programming, requirements, there, were, other, languages, that, could, have, been, considered, but, pl, i, offered, the, most, complete, solution, even, though, it, had, not, been, implemented, for, the, first, few, years, of, the, multics, project, a, subset, of, the, language, could, be, compiled, to, assembly, language, with, the, early, pl, i, epl, compiler, by, doug, mcilory, and, bob, morris, from, bell, labs, epl, supported, the, project, until, a, boot, strapping, compiler, for, the, full, pl, i, could, be, developed, bell, labs, left, the, multics, project, in, 1969, and, developed, a, system, programming, language, b, based, on, bcpl, concepts, written, by, dennis, ritchie, and, ken, thompson, ritchie, created, a, boot, strapping, compiler, for, b, and, wrote, unics, uniplexed, information, and, computing, service, operating, system, for, a, pdp, 7, in, b, unics, eventually, became, spelled, unix, bell, labs, started, the, development, and, expansion, of, c, based, on, b, and, bcpl, the, bcpl, compiler, had, been, transported, to, multics, by, bell, labs, and, bcpl, was, a, preferred, language, at, bell, labs, initially, a, front, end, program, to, bell, labs, b, compiler, was, used, while, a, c, compiler, was, developed, in, 1971, a, new, pdp, 11, provided, the, resource, to, define, extensions, to, b, and, rewrite, the, compiler, by, 1973, the, design, of, c, language, was, essentially, complete, and, the, unix, kernel, for, a, pdp, 11, was, rewritten, in, c, steve, johnson, started, development, of, portable, c, compiler, pcc, to, support, retargeting, of, c, compilers, to, new, machines, object, oriented, programming, oop, offered, some, interesting, possibilities, for, application, development, and, maintenance, oop, concepts, go, further, back, but, were, part, of, lisp, and, simula, language, science, bell, labs, became, interested, in, oop, with, the, development, of, c, c, was, first, used, in, 1980, for, systems, programming, the, initial, design, leveraged, c, language, systems, programming, capabilities, with, simula, concepts, object, oriented, facilities, were, added, in, 1983, the, cfront, program, implemented, a, c, front, end, for, c84, language, compiler, in, subsequent, years, several, c, compilers, were, developed, as, c, popularity, grew, in, many, application, domains, the, idea, of, using, a, higher, level, language, quickly, caught, on, because, of, the, expanding, functionality, supported, by, newer, programming, languages, and, the, increasing, complexity, of, computer, architectures, compilers, became, more, complex, darpa, defense, advanced, research, projects, agency, sponsored, a, compiler, project, with, wulf, s, cmu, research, team, in, 1970, the, production, quality, compiler, compiler, pqcc, design, would, produce, a, production, quality, compiler, pqc, from, formal, definitions, of, source, language, and, the, target, pqcc, tried, to, extend, the, term, compiler, compiler, beyond, the, traditional, meaning, as, a, parser, generator, e, g, yacc, without, much, success, pqcc, might, more, properly, be, referred, to, as, a, compiler, generator, pqcc, research, into, code, generation, process, sought, to, build, a, truly, automatic, compiler, writing, system, the, effort, discovered, and, designed, the, phase, structure, of, the, pqc, the, bliss, 11, compiler, provided, the, initial, structure, the, phases, included, analyses, front, end, intermediate, translation, to, virtual, machine, middle, end, and, translation, to, the, target, back, end, tcol, was, developed, for, the, pqcc, research, to, handle, language, specific, constructs, in, the, intermediate, representation, variations, of, tcol, supported, various, languages, the, pqcc, project, investigated, techniques, of, automated, compiler, construction, the, design, concepts, proved, useful, in, optimizing, compilers, and, compilers, for, the, since, 1995, object, oriented, programming, language, ada, the, ada, stoneman, document, formalized, the, program, support, environment, apse, along, with, the, kernel, kapse, and, minimal, mapse, an, ada, interpreter, nyu, ed, supported, development, and, standardization, efforts, with, the, american, national, standards, institute, ansi, and, the, international, standards, organization, iso, initial, ada, compiler, development, by, the, u, s, military, services, included, the, compilers, in, a, complete, integrated, design, environment, along, the, lines, of, the, stoneman, document, army, and, navy, worked, on, the, ada, language, system, als, project, targeted, to, dec, vax, architecture, while, the, air, force, started, on, the, ada, integrated, environment, aie, targeted, to, ibm, 370, series, while, the, projects, did, not, provide, the, desired, results, they, did, contribute, to, the, overall, effort, on, ada, development, other, ada, compiler, efforts, got, underway, in, britain, at, the, university, of, york, and, in, germany, at, the, university, of, karlsruhe, in, the, u, s, verdix, later, acquired, by, rational, delivered, the, verdix, ada, development, system, vads, to, the, army, vads, provided, a, set, of, development, tools, including, a, compiler, unix, vads, could, be, hosted, on, a, variety, of, unix, platforms, such, as, dec, ultrix, and, the, sun, 3, 60, solaris, targeted, to, motorola, 68020, in, an, army, cecom, evaluation, there, were, soon, many, ada, compilers, available, that, passed, the, ada, validation, tests, the, free, software, foundation, gnu, project, developed, the, gnu, compiler, collection, gcc, which, provides, a, core, capability, to, support, multiple, languages, and, targets, the, ada, version, gnat, is, one, of, the, most, widely, used, ada, compilers, gnat, is, free, but, there, is, also, commercial, support, for, example, adacore, was, founded, in, 1994, to, provide, commercial, software, solutions, for, ada, gnat, pro, includes, the, gnu, gcc, based, gnat, with, a, tool, suite, to, provide, an, integrated, development, environment, high, level, languages, continued, to, drive, compiler, research, and, development, focus, areas, included, optimization, and, automatic, code, generation, trends, in, programming, languages, and, development, environments, influenced, compiler, technology, more, compilers, became, included, in, language, distributions, perl, java, development, kit, and, as, a, component, of, an, ide, vads, eclipse, ada, pro, the, interrelationship, and, interdependence, of, technologies, grew, the, advent, of, web, services, promoted, growth, of, web, languages, and, scripting, languages, scripts, trace, back, to, the, early, days, of, command, line, interfaces, cli, where, the, user, could, enter, commands, to, be, executed, by, the, system, user, shell, concepts, developed, with, languages, to, write, shell, programs, early, windows, designs, offered, a, simple, batch, programming, capability, the, conventional, transformation, of, these, language, used, an, interpreter, while, not, widely, used, bash, and, batch, compilers, have, been, written, more, recently, sophisticated, interpreted, languages, became, part, of, the, developers, tool, kit, modern, scripting, languages, include, php, python, ruby, and, lua, lua, is, widely, used, in, game, development, all, of, these, have, interpreter, and, compiler, support, when, the, field, of, compiling, began, in, the, late, 50s, its, focus, was, limited, to, the, translation, of, high, level, language, programs, into, machine, code, the, compiler, field, is, increasingly, intertwined, with, other, disciplines, including, computer, architecture, programming, languages, formal, methods, software, engineering, and, computer, security, the, compiler, research, the, next, 50, years, article, noted, the, importance, of, object, oriented, languages, and, java, security, and, parallel, computing, were, cited, among, the, future, research, targets, a, compiler, implements, a, formal, transformation, from, a, high, level, source, program, to, a, low, level, target, program, compiler, design, can, define, an, end, to, end, solution, or, tackle, a, defined, subset, that, interfaces, with, other, compilation, tools, e, g, preprocessors, assemblers, linkers, design, requirements, include, rigorously, defined, interfaces, both, internally, between, compiler, components, and, externally, between, supporting, toolsets, in, the, early, days, the, approach, taken, to, compiler, design, was, directly, affected, by, the, complexity, of, the, computer, language, to, be, processed, the, experience, of, the, person, s, designing, it, and, the, resources, available, resource, limitations, led, to, the, need, to, pass, through, the, source, code, more, than, once, a, compiler, for, a, relatively, simple, language, written, by, one, person, might, be, a, single, monolithic, piece, of, software, however, as, the, source, language, grows, in, complexity, the, design, may, be, split, into, a, number, of, interdependent, phases, separate, phases, provide, design, improvements, that, focus, development, on, the, functions, in, the, compilation, process, classifying, compilers, by, number, of, passes, has, its, background, in, the, hardware, resource, limitations, of, computers, compiling, involves, performing, much, work, and, early, computers, did, not, have, enough, memory, to, contain, one, program, that, did, all, of, this, work, as, a, result, compilers, were, split, up, into, smaller, programs, which, each, made, a, pass, over, the, source, or, some, representation, of, it, performing, some, of, the, required, analysis, and, translations, the, ability, to, compile, in, a, single, pass, has, classically, been, seen, as, a, benefit, because, it, simplifies, the, job, of, writing, a, compiler, and, one, pass, compilers, generally, perform, compilations, faster, than, multi, pass, compilers, thus, partly, driven, by, the, resource, limitations, of, early, systems, many, early, languages, were, specifically, designed, so, that, they, could, be, compiled, in, a, single, pass, e, g, pascal, in, some, cases, the, design, of, a, language, feature, may, require, a, compiler, to, perform, more, than, one, pass, over, the, source, for, instance, consider, a, declaration, appearing, on, line, 20, of, the, source, which, affects, the, translation, of, a, statement, appearing, on, line, 10, in, this, case, the, first, pass, needs, to, gather, information, about, declarations, appearing, after, statements, that, they, affect, with, the, actual, translation, happening, during, a, subsequent, pass, the, disadvantage, of, compiling, in, a, single, pass, is, that, it, is, not, possible, to, perform, many, of, the, sophisticated, optimizations, needed, to, generate, high, quality, code, it, can, be, difficult, to, count, exactly, how, many, passes, an, optimizing, compiler, makes, for, instance, different, phases, of, optimization, may, analyse, one, expression, many, times, but, only, analyse, another, expression, once, splitting, a, compiler, up, into, small, programs, is, a, technique, used, by, researchers, interested, in, producing, provably, correct, compilers, proving, the, correctness, of, a, set, of, small, programs, often, requires, less, effort, than, proving, the, correctness, of, a, larger, single, equivalent, program, regardless, of, the, exact, number, of, phases, in, the, compiler, design, the, phases, can, be, assigned, to, one, of, three, stages, the, stages, include, a, front, end, a, middle, end, and, a, back, end, this, front, middle, back, end, approach, makes, it, possible, to, combine, front, ends, for, different, languages, with, back, ends, for, different, cpus, while, sharing, the, optimizations, of, the, middle, end, practical, examples, of, this, approach, are, the, gnu, compiler, collection, clang, llvm, based, c, c, compiler, and, the, amsterdam, compiler, kit, which, have, multiple, front, ends, shared, optimizations, and, multiple, back, ends, the, front, end, analyzes, the, source, code, to, build, an, internal, representation, of, the, program, called, the, intermediate, representation, ir, it, also, manages, the, symbol, table, a, data, structure, mapping, each, symbol, in, the, source, code, to, associated, information, such, as, location, type, and, scope, while, the, frontend, can, be, a, single, monolithic, function, or, program, as, in, a, scannerless, parser, it, was, traditionally, implemented, and, analyzed, as, several, phases, which, may, execute, sequentially, or, concurrently, this, method, is, favored, due, to, its, modularity, and, separation, of, concerns, most, commonly, the, frontend, is, broken, into, three, phases, lexical, analysis, also, known, as, lexing, or, scanning, syntax, analysis, also, known, as, scanning, or, parsing, and, semantic, analysis, lexing, and, parsing, comprise, the, syntactic, analysis, word, syntax, and, phrase, syntax, respectively, and, in, simple, cases, these, modules, the, lexer, and, parser, can, be, automatically, generated, from, a, grammar, for, the, language, though, in, more, complex, cases, these, require, manual, modification, the, lexical, grammar, and, phrase, grammar, are, usually, context, free, grammars, which, simplifies, analysis, significantly, with, context, sensitivity, handled, at, the, semantic, analysis, phase, the, semantic, analysis, phase, is, generally, more, complex, and, written, by, hand, but, can, be, partially, or, fully, automated, using, attribute, grammars, these, phases, themselves, can, be, further, broken, down, lexing, as, scanning, and, evaluating, and, parsing, as, building, a, concrete, syntax, tree, cst, parse, tree, and, then, transforming, it, into, an, abstract, syntax, tree, ast, syntax, tree, in, some, cases, additional, phases, are, used, notably, line, reconstruction, and, preprocessing, but, these, are, rare, the, main, phases, of, the, front, end, include, the, following, the, middle, end, also, known, as, optimizer, performs, optimizations, on, the, intermediate, representation, in, order, to, improve, the, performance, and, the, quality, of, the, produced, machine, code, the, middle, end, contains, those, optimizations, that, are, independent, of, the, cpu, architecture, being, targeted, the, main, phases, of, the, middle, end, include, the, following, compiler, analysis, is, the, prerequisite, for, any, compiler, optimization, and, they, tightly, work, together, for, example, dependence, analysis, is, crucial, for, loop, transformation, the, scope, of, compiler, analysis, and, optimizations, vary, greatly, their, scope, may, range, from, operating, within, a, basic, block, to, whole, procedures, or, even, the, whole, program, there, is, a, trade, off, between, the, granularity, of, the, optimizations, and, the, cost, of, compilation, for, example, peephole, optimizations, are, fast, to, perform, during, compilation, but, only, affect, a, small, local, fragment, of, the, code, and, can, be, performed, independently, of, the, context, in, which, the, code, fragment, appears, in, contrast, interprocedural, optimization, requires, more, compilation, time, and, memory, space, but, enable, optimizations, that, are, only, possible, by, considering, the, behavior, of, multiple, functions, simultaneously, interprocedural, analysis, and, optimizations, are, common, in, modern, commercial, compilers, from, hp, ibm, sgi, intel, microsoft, and, sun, microsystems, the, free, software, gcc, was, criticized, for, a, long, time, for, lacking, powerful, interprocedural, optimizations, but, it, is, changing, in, this, respect, another, open, source, compiler, with, full, analysis, and, optimization, infrastructure, is, open64, which, is, used, by, many, organizations, for, research, and, commercial, purposes, due, to, the, extra, time, and, space, needed, for, compiler, analysis, and, optimizations, some, compilers, skip, them, by, default, users, have, to, use, compilation, options, to, explicitly, tell, the, compiler, which, optimizations, should, be, enabled, the, back, end, is, responsible, for, the, cpu, architecture, specific, optimizations, and, for, code, generation, the, main, phases, of, the, back, end, include, the, following, compiler, correctness, is, the, branch, of, software, engineering, that, deals, with, trying, to, show, that, a, compiler, behaves, according, to, its, language, specification, techniques, include, developing, the, compiler, using, formal, methods, and, using, rigorous, testing, often, called, compiler, validation, on, an, existing, compiler, higher, level, programming, languages, usually, appear, with, a, type, of, translation, in, mind, either, designed, as, compiled, language, or, interpreted, language, however, in, practice, there, is, rarely, anything, about, a, language, that, requires, it, to, be, exclusively, compiled, or, exclusively, interpreted, although, it, is, possible, to, design, languages, that, rely, on, re, interpretation, at, run, time, the, categorization, usually, reflects, the, most, popular, or, widespread, implementations, of, a, language, for, instance, basic, is, sometimes, called, an, interpreted, language, and, c, a, compiled, one, despite, the, existence, of, basic, compilers, and, c, interpreters, interpretation, does, not, replace, compilation, completely, it, only, hides, it, from, the, user, and, makes, it, gradual, even, though, an, interpreter, can, itself, be, interpreted, a, set, of, directly, executed, machine, instructions, is, needed, somewhere, at, the, bottom, of, the, execution, stack, see, machine, language, furthermore, for, optimization, compilers, can, contain, interpreter, functionality, and, interpreters, may, include, ahead, of, time, compilation, techniques, for, example, where, an, expression, can, be, executed, during, compilation, and, the, results, inserted, into, the, output, program, then, it, prevents, it, having, to, be, recalculated, each, time, the, program, runs, which, can, greatly, speed, up, the, final, program, modern, trends, toward, just, in, time, compilation, and, bytecode, interpretation, at, times, blur, the, traditional, categorizations, of, compilers, and, interpreters, even, further, some, language, specifications, spell, out, that, implementations, must, include, a, compilation, facility, for, example, common, lisp, however, there, is, nothing, inherent, in, the, definition, of, common, lisp, that, stops, it, from, being, interpreted, other, languages, have, features, that, are, very, easy, to, implement, in, an, interpreter, but, make, writing, a, compiler, much, harder, for, example, apl, snobol4, and, many, scripting, languages, allow, programs, to, construct, arbitrary, source, code, at, runtime, with, regular, string, operations, and, then, execute, that, code, by, passing, it, to, a, special, evaluation, function, to, implement, these, features, in, a, compiled, language, programs, must, usually, be, shipped, with, a, runtime, library, that, includes, a, version, of, the, compiler, itself, one, classification, of, compilers, is, by, the, platform, on, which, their, generated, code, executes, this, is, known, as, the, target, platform, a, native, or, hosted, compiler, is, one, whose, output, is, intended, to, directly, run, on, the, same, type, of, computer, and, operating, system, that, the, compiler, itself, runs, on, the, output, of, a, cross, compiler, is, designed, to, run, on, a, different, platform, cross, compilers, are, often, used, when, developing, software, for, embedded, systems, that, are, not, intended, to, support, a, software, development, environment, the, output, of, a, compiler, that, produces, code, for, a, virtual, machine, vm, may, or, may, not, be, executed, on, the, same, platform, as, the, compiler, that, produced, it, for, this, reason, such, compilers, are, not, usually, classified, as, native, or, cross, compilers, the, lower, level, language, that, is, the, target, of, a, compiler, may, itself, be, a, high, level, programming, language, c, viewed, by, some, as, a, sort, of, portable, assembly, language, is, frequently, the, target, language, of, such, compilers, for, example, cfront, the, original, compiler, for, c, used, c, as, its, target, language, the, c, code, generated, by, such, a, compiler, is, usually, not, intended, to, be, readable, and, maintained, by, humans, so, indent, style, and, creating, pretty, c, intermediate, code, are, ignored, some, of, the, features, of, c, that, make, it, a, good, target, language, include, the, line, directive, which, can, be, generated, by, the, compiler, to, support, debugging, of, the, original, source, and, the, wide, platform, support, available, with, c, compilers, while, a, common, compiler, type, outputs, machine, code, there, are, many, other, types, assemblers, which, translate, human, readable, assembly, language, to, the, machine, code, instructions, executed, by, hardware, are, not, considered, compilers, the, inverse, program, that, translates, machine, code, to, assembly, language, is, called, a, disassembler