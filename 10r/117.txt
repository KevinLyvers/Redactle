https://en.wikipedia.org/wiki/Structured_programming
structured, programming, is, a, programming, paradigm, aimed, at, improving, the, clarity, quality, and, development, time, of, a, computer, program, by, making, extensive, use, of, the, structured, control, flow, constructs, of, selection, if, then, else, and, repetition, while, and, for, block, structures, and, subroutines, it, emerged, in, the, late, 1950s, with, the, appearance, of, the, algol, 58, and, algol, 60, programming, languages, with, the, latter, including, support, for, block, structures, contributing, factors, to, its, popularity, and, widespread, acceptance, at, first, in, academia, and, later, among, practitioners, include, the, discovery, of, what, is, now, known, as, the, structured, program, theorem, in, 1966, and, the, publication, of, the, influential, go, to, statement, considered, harmful, open, letter, in, 1968, by, dutch, computer, scientist, edsger, w, dijkstra, who, coined, the, term, structured, programming, structured, programming, is, most, frequently, used, with, deviations, that, allow, for, clearer, programs, in, some, particular, cases, such, as, when, exception, handling, has, to, be, performed, following, the, structured, program, theorem, all, programs, are, seen, as, composed, of, three, control, structures, subroutines, callable, units, such, as, procedures, functions, methods, or, subprograms, are, used, to, allow, a, sequence, to, be, referred, to, by, a, single, statement, blocks, are, used, to, enable, groups, of, statements, to, be, treated, as, if, they, were, one, statement, block, structured, languages, have, a, syntax, for, enclosing, structures, in, some, formal, way, such, as, an, if, statement, bracketed, by, if, fi, as, in, algol, 68, or, a, code, section, bracketed, by, begin, end, as, in, pl, i, and, pascal, whitespace, indentation, as, in, python, or, the, curly, braces, of, c, and, many, later, languages, it, is, possible, to, do, structured, programming, in, any, programming, language, though, it, is, preferable, to, use, something, like, a, procedural, programming, language, some, of, the, languages, initially, used, for, structured, programming, include, algol, pascal, pl, i, ada, and, rpl, but, most, new, procedural, programming, languages, since, that, time, have, included, features, to, encourage, structured, programming, and, sometimes, deliberately, left, out, features, notably, goto, in, an, effort, to, make, unstructured, programming, more, difficult, structured, programming, sometimes, known, as, modular, programming, enforces, a, logical, structure, on, the, program, being, written, to, make, it, more, efficient, and, easier, to, understand, and, modify, the, structured, program, theorem, provides, the, theoretical, basis, of, structured, programming, it, states, that, three, ways, of, combining, programs, sequencing, selection, and, iteration, are, sufficient, to, express, any, computable, function, this, observation, did, not, originate, with, the, structured, programming, movement, these, structures, are, sufficient, to, describe, the, instruction, cycle, of, a, central, processing, unit, as, well, as, the, operation, of, a, turing, machine, therefore, a, processor, is, always, executing, a, structured, program, in, this, sense, even, if, the, instructions, it, reads, from, memory, are, not, part, of, a, structured, program, however, authors, usually, credit, the, result, to, a, 1966, paper, by, b, hm, and, jacopini, possibly, because, dijkstra, cited, this, paper, himself, the, structured, program, theorem, does, not, address, how, to, write, and, analyze, a, usefully, structured, program, these, issues, were, addressed, during, the, late, 1960s, and, early, 1970s, with, major, contributions, by, dijkstra, robert, w, floyd, tony, hoare, ole, johan, dahl, and, david, gries, p, j, plauger, an, early, adopter, of, structured, programming, described, his, reaction, to, the, structured, program, theorem, us, converts, waved, this, interesting, bit, of, news, under, the, noses, of, the, unreconstructed, assembly, language, programmers, who, kept, trotting, forth, twisty, bits, of, logic, and, saying, i, betcha, can, t, structure, this, neither, the, proof, by, b, hm, and, jacopini, nor, our, repeated, successes, at, writing, structured, code, brought, them, around, one, day, sooner, than, they, were, ready, to, convince, themselves, donald, knuth, accepted, the, principle, that, programs, must, be, written, with, provability, in, mind, but, he, disagreed, with, abolishing, the, goto, statement, and, as, of, 2018, has, continued, to, use, it, in, his, programs, in, his, 1974, paper, structured, programming, with, goto, statements, he, gave, examples, where, he, believed, that, a, direct, jump, leads, to, clearer, and, more, efficient, code, without, sacrificing, provability, knuth, proposed, a, looser, structural, constraint, it, should, be, possible, to, draw, a, program, s, flow, chart, with, all, forward, branches, on, the, left, all, backward, branches, on, the, right, and, no, branches, crossing, each, other, many, of, those, knowledgeable, in, compilers, and, graph, theory, have, advocated, allowing, only, reducible, flow, graphs, structured, programming, theorists, gained, a, major, ally, in, the, 1970s, after, ibm, researcher, harlan, mills, applied, his, interpretation, of, structured, programming, theory, to, the, development, of, an, indexing, system, for, the, new, york, times, research, file, the, project, was, a, great, engineering, success, and, managers, at, other, companies, cited, it, in, support, of, adopting, structured, programming, although, dijkstra, criticized, the, ways, that, mills, s, interpretation, differed, from, the, published, work, as, late, as, 1987, it, was, still, possible, to, raise, the, question, of, structured, programming, in, a, computer, science, journal, frank, rubin, did, so, in, that, year, with, an, open, letter, titled, goto, considered, harmful, considered, harmful, numerous, objections, followed, including, a, response, from, dijkstra, that, sharply, criticized, both, rubin, and, the, concessions, other, writers, made, when, responding, to, him, by, the, end, of, the, 20th, century, nearly, all, computer, scientists, were, convinced, that, it, is, useful, to, learn, and, apply, the, concepts, of, structured, programming, high, level, programming, languages, that, originally, lacked, programming, structures, such, as, fortran, cobol, and, basic, now, have, them, while, goto, has, now, largely, been, replaced, by, the, structured, constructs, of, selection, if, then, else, and, repetition, while, and, for, few, languages, are, purely, structured, the, most, common, deviation, found, in, many, languages, is, the, use, of, a, return, statement, for, early, exit, from, a, subroutine, this, results, in, multiple, exit, points, instead, of, the, single, exit, point, required, by, structured, programming, there, are, other, constructions, to, handle, cases, that, are, awkward, in, purely, structured, programming, the, most, common, deviation, from, structured, programming, is, early, exit, from, a, function, or, loop, at, the, level, of, functions, this, is, a, return, statement, at, the, level, of, loops, this, is, a, break, statement, terminate, the, loop, or, continue, statement, terminate, the, current, iteration, proceed, with, next, iteration, in, structured, programming, these, can, be, replicated, by, adding, additional, branches, or, tests, but, for, returns, from, nested, code, this, can, add, significant, complexity, c, is, an, early, and, prominent, example, of, these, constructs, some, newer, languages, also, have, labeled, breaks, which, allow, breaking, out, of, more, than, just, the, innermost, loop, exceptions, also, allow, early, exit, but, have, further, consequences, and, thus, are, treated, below, multiple, exits, can, arise, for, a, variety, of, reasons, most, often, either, that, the, subroutine, has, no, more, work, to, do, if, returning, a, value, it, has, completed, the, calculation, or, has, encountered, exceptional, circumstances, that, prevent, it, from, continuing, hence, needing, exception, handling, the, most, common, problem, in, early, exit, is, that, cleanup, or, final, statements, are, not, executed, for, example, allocated, memory, is, not, deallocated, or, open, files, are, not, closed, causing, memory, leaks, or, resource, leaks, these, must, be, done, at, each, return, site, which, is, brittle, and, can, easily, result, in, bugs, for, instance, in, later, development, a, return, statement, could, be, overlooked, by, a, developer, and, an, action, that, should, be, performed, at, the, end, of, a, subroutine, e, g, a, trace, statement, might, not, be, performed, in, all, cases, languages, without, a, return, statement, such, as, standard, pascal, and, seed7, do, not, have, this, problem, most, modern, languages, provide, language, level, support, to, prevent, such, leaks, see, detailed, discussion, at, resource, management, most, commonly, this, is, done, via, unwind, protection, which, ensures, that, certain, code, is, guaranteed, to, be, run, when, execution, exits, a, block, this, is, a, structured, alternative, to, having, a, cleanup, block, and, a, goto, this, is, most, often, known, as, try, finally, and, considered, a, part, of, exception, handling, in, case, of, multiple, return, statements, introducing, try, finally, without, exceptions, might, look, strange, various, techniques, exist, to, encapsulate, resource, management, an, alternative, approach, found, primarily, in, c, is, resource, acquisition, is, initialization, which, uses, normal, stack, unwinding, variable, deallocation, at, function, exit, to, call, destructors, on, local, variables, to, deallocate, resources, kent, beck, martin, fowler, and, co, authors, have, argued, in, their, refactoring, books, that, nested, conditionals, may, be, harder, to, understand, than, a, certain, type, of, flatter, structure, using, multiple, exits, predicated, by, guard, clauses, their, 2009, book, flatly, states, that, one, exit, point, is, really, not, a, useful, rule, clarity, is, the, key, principle, if, the, method, is, clearer, with, one, exit, point, use, one, exit, point, otherwise, don, t, they, offer, a, cookbook, solution, for, transforming, a, function, consisting, only, of, nested, conditionals, into, a, sequence, of, guarded, return, or, throw, statements, followed, by, a, single, unguarded, block, which, is, intended, to, contain, the, code, for, the, common, case, while, the, guarded, statements, are, supposed, to, deal, with, the, less, common, ones, or, with, errors, herb, sutter, and, andrei, alexandrescu, also, argue, in, their, 2004, c, tips, book, that, the, single, exit, point, is, an, obsolete, requirement, in, his, 2004, textbook, david, watt, writes, that, single, entry, multi, exit, control, flows, are, often, desirable, using, tennent, s, framework, notion, of, sequencer, watt, uniformly, describes, the, control, flow, constructs, found, in, contemporary, programming, languages, and, attempts, to, explain, why, certain, types, of, sequencers, are, preferable, to, others, in, the, context, of, multi, exit, control, flows, watt, writes, that, unrestricted, gotos, jump, sequencers, are, bad, because, the, destination, of, the, jump, is, not, self, explanatory, to, the, reader, of, a, program, until, the, reader, finds, and, examines, the, actual, label, or, address, that, is, the, target, of, the, jump, in, contrast, watt, argues, that, the, conceptual, intent, of, a, return, sequencer, is, clear, from, its, own, context, without, having, to, examine, its, destination, watt, writes, that, a, class, of, sequencers, known, as, escape, sequencers, defined, as, a, sequencer, that, terminates, execution, of, a, textually, enclosing, command, or, procedure, encompasses, both, breaks, from, loops, including, multi, level, breaks, and, return, statements, watt, also, notes, that, while, jump, sequencers, gotos, have, been, somewhat, restricted, in, languages, like, c, where, the, target, must, be, an, inside, the, local, block, or, an, encompassing, outer, block, that, restriction, alone, is, not, sufficient, to, make, the, intent, of, gotos, in, c, self, describing, and, so, they, can, still, produce, spaghetti, code, watt, also, examines, how, exception, sequencers, differ, from, escape, and, jump, sequencers, this, is, explained, in, the, next, section, of, this, article, in, contrast, to, the, above, bertrand, meyer, wrote, in, his, 2009, textbook, that, instructions, like, break, and, continue, are, just, the, old, goto, in, sheep, s, clothing, and, strongly, advised, against, their, use, based, on, the, coding, error, from, the, ariane, 501, disaster, software, developer, jim, bonang, argues, that, any, exceptions, thrown, from, a, function, violate, the, single, exit, paradigm, and, proposes, that, all, inter, procedural, exceptions, should, be, forbidden, bonang, proposes, that, all, single, exit, conforming, c, should, be, written, along, the, lines, of, peter, ritchie, also, notes, that, in, principle, even, a, single, throw, right, before, the, return, in, a, function, constitutes, a, violation, of, the, single, exit, principle, but, argues, that, dijkstra, s, rules, were, written, in, a, time, before, exception, handling, became, a, paradigm, in, programming, languages, so, he, proposes, to, allow, any, number, of, throw, points, in, addition, to, a, single, return, point, he, notes, that, solutions, that, wrap, exceptions, for, the, sake, of, creating, a, single, exit, have, higher, nesting, depth, and, thus, are, more, difficult, to, comprehend, and, even, accuses, those, who, propose, to, apply, such, solutions, to, programming, languages, that, support, exceptions, of, engaging, in, cargo, cult, thinking, david, watt, also, analyzes, exception, handling, in, the, framework, of, sequencers, introduced, in, this, article, in, the, previous, section, on, early, exits, watt, notes, that, an, abnormal, situation, generally, exemplified, with, arithmetic, overflows, or, input, output, failures, like, file, not, found, is, a, kind, of, error, that, is, detected, in, some, low, level, program, unit, but, a, handler, is, more, naturally, located, in, a, high, level, program, unit, for, example, a, program, might, contain, several, calls, to, read, files, but, the, action, to, perform, when, a, file, is, not, found, depends, on, the, meaning, purpose, of, the, file, in, question, to, the, program, and, thus, a, handling, routine, for, this, abnormal, situation, cannot, be, located, in, low, level, system, code, watts, further, notes, that, introducing, status, flags, testing, in, the, caller, as, single, exit, structured, programming, or, even, multi, exit, return, sequencers, would, entail, results, in, a, situation, where, the, application, code, tends, to, get, cluttered, by, tests, of, status, flags, and, that, the, programmer, might, forgetfully, or, lazily, omit, to, test, a, status, flag, in, fact, abnormal, situations, represented, by, status, flags, are, by, default, ignored, he, notes, that, in, contrast, to, status, flags, testing, exceptions, have, the, opposite, default, behavior, causing, the, program, to, terminate, unless, the, programmer, explicitly, deals, with, the, exception, in, some, way, possibly, by, adding, code, to, willfully, ignore, it, based, on, these, arguments, watt, concludes, that, jump, sequencers, or, escape, sequencers, discussed, in, the, previous, section, are, not, as, suitable, as, a, dedicated, exception, sequencer, with, the, semantics, discussed, above, the, textbook, by, louden, and, lambert, emphasizes, that, exception, handling, differs, from, structured, programming, constructs, like, while, loops, because, the, transfer, of, control, is, set, up, at, a, different, point, in, the, program, than, that, where, the, actual, transfer, takes, place, at, the, point, where, the, transfer, actually, occurs, there, may, be, no, syntactic, indication, that, control, will, in, fact, be, transferred, computer, science, professor, arvind, kumar, bansal, also, notes, that, in, languages, which, implement, exception, handling, even, control, structures, like, for, which, have, the, single, exit, property, in, absence, of, exceptions, no, longer, have, it, in, presence, of, exceptions, because, an, exception, can, prematurely, cause, an, early, exit, in, any, part, of, the, control, structure, for, instance, if, init, throws, an, exception, in, for, init, check, increm, then, the, usual, exit, point, after, check, is, not, reached, citing, multiple, prior, studies, by, others, 1999, 2004, and, their, own, results, westley, weimer, and, george, necula, wrote, that, a, significant, problem, with, exceptions, is, that, they, create, hidden, control, flow, paths, that, are, difficult, for, programmers, to, reason, about, the, necessity, to, limit, code, to, single, exit, points, appears, in, some, contemporary, programming, environments, focused, on, parallel, computing, such, as, openmp, the, various, parallel, constructs, from, openmp, like, parallel, do, do, not, allow, early, exits, from, inside, to, the, outside, of, the, parallel, construct, this, restriction, includes, all, manner, of, exits, from, break, to, c, exceptions, but, all, of, these, are, permitted, inside, the, parallel, construct, if, the, jump, target, is, also, inside, it, more, rarely, subprograms, allow, multiple, entry, this, is, most, commonly, only, re, entry, into, a, coroutine, or, generator, semicoroutine, where, a, subprogram, yields, control, and, possibly, a, value, but, can, then, be, resumed, where, it, left, off, there, are, a, number, of, common, uses, of, such, programming, notably, for, streams, particularly, input, output, state, machines, and, concurrency, from, a, code, execution, point, of, view, yielding, from, a, coroutine, is, closer, to, structured, programming, than, returning, from, a, subroutine, as, the, subprogram, has, not, actually, terminated, and, will, continue, when, called, again, it, is, not, an, early, exit, however, coroutines, mean, that, multiple, subprograms, have, execution, state, rather, than, a, single, call, stack, of, subroutines, and, thus, introduce, a, different, form, of, complexity, it, is, very, rare, for, subprograms, to, allow, entry, to, an, arbitrary, position, in, the, subprogram, as, in, this, case, the, program, state, such, as, variable, values, is, uninitialized, or, ambiguous, and, this, is, very, similar, to, a, goto, some, programs, particularly, parsers, and, communications, protocols, have, a, number, of, states, that, follow, each, other, in, a, way, that, is, not, easily, reduced, to, the, basic, structures, and, some, programmers, implement, the, state, changes, with, a, jump, to, the, new, state, this, type, of, state, switching, is, often, used, in, the, linux, kernel, however, it, is, possible, to, structure, these, systems, by, making, each, state, change, a, separate, subprogram, and, using, a, variable, to, indicate, the, active, state, see, trampoline, alternatively, these, can, be, implemented, via, coroutines, which, dispense, with, the, trampoline